Nonterminals useless in grammar

    start
    expr


Terminals unused in grammar

    TOK_BLOCK
    TOK_CALL


Rules useless in grammar

   51 start: program

   52 vardecl: type TOK_IDENT '=' expr

   53 expr: expr token


State 4 conflicts: 1 reduce/reduce
State 5 conflicts: 1 reduce/reduce
State 12 conflicts: 1 shift/reduce
State 15 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program vardecl
    3        | program error '}'
    4        | program error ';'
    5        | program token
    6        | %empty

    7 vardecl: type TOK_IDENT

    8 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';'

    9 type: plaintype
   10     | TOK_ARRAY '[' plaintype ']'

   11 plaintype: TOK_INT
   12          | TOK_STRING
   13          | TOK_PTR

   14 token: '('
   15      | ')'
   16      | '['
   17      | ']'
   18      | ','
   19      | '}'
   20      | '{'
   21      | ';'
   22      | '='
   23      | '+'
   24      | '-'
   25      | '*'
   26      | '/'
   27      | '%'
   28      | TOK_NOT
   29      | TOK_PTR
   30      | TOK_ROOT TOK_VOID
   31      | TOK_INT
   32      | TOK_STRING
   33      | TOK_IF
   34      | TOK_ELSE
   35      | TOK_WHILE
   36      | TOK_RETURN
   37      | TOK_NULLPTR
   38      | TOK_ARRAY
   39      | TOK_ARROW
   40      | TOK_ALLOC
   41      | TOK_EQ
   42      | TOK_NE
   43      | TOK_LT
   44      | TOK_LE
   45      | TOK_GT
   46      | TOK_GE
   47      | TOK_IDENT
   48      | TOK_INTCON
   49      | TOK_CHARCON
   50      | TOK_STRINGCON


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 27
    '(' (40) 14
    ')' (41) 15
    '*' (42) 25
    '+' (43) 23
    ',' (44) 18
    '-' (45) 24
    '/' (47) 26
    ';' (59) 4 8 21
    '=' (61) 22
    '[' (91) 10 16
    ']' (93) 10 17
    '{' (123) 8 20
    '}' (125) 3 8 19
    error (256) 3 4
    TOK_VOID (258) 30
    TOK_INT (259) 11 31
    TOK_STRING (260) 12 32
    TOK_IF (261) 33
    TOK_ELSE (262) 34
    TOK_WHILE (263) 35
    TOK_RETURN (264) 36
    TOK_STRUCT (265) 8
    TOK_NULLPTR (266) 37
    TOK_ARRAY (267) 10 38
    TOK_ARROW (268) 39
    TOK_ALLOC (269) 40
    TOK_PTR (270) 13 29
    TOK_EQ (271) 41
    TOK_NE (272) 42
    TOK_LT (273) 43
    TOK_LE (274) 44
    TOK_GT (275) 45
    TOK_GE (276) 46
    TOK_NOT (277) 28
    TOK_IDENT (278) 7 8 47
    TOK_INTCON (279) 48
    TOK_CHARCON (280) 49
    TOK_STRINGCON (281) 50
    TOK_ROOT (282) 30
    TOK_BLOCK (283)
    TOK_CALL (284)


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program (45)
        on left: 1 2 3 4 5 6
        on right: 0 1 2 3 4 5
    vardecl (46)
        on left: 7
        on right: 2
    structdef (47)
        on left: 8
        on right: 1
    type (48)
        on left: 9 10
        on right: 7 8
    plaintype (49)
        on left: 11 12 13
        on right: 9 10
    token (50)
        on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
        on right: 5


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . vardecl
    3        | program . error '}'
    4        | program . error ';'
    5        | program . token

    $end           shift, and go to state 2
    error          shift, and go to state 3
    TOK_INT        shift, and go to state 4
    TOK_STRING     shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_ELSE       shift, and go to state 7
    TOK_WHILE      shift, and go to state 8
    TOK_RETURN     shift, and go to state 9
    TOK_STRUCT     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 11
    TOK_ARRAY      shift, and go to state 12
    TOK_ARROW      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_EQ         shift, and go to state 16
    TOK_NE         shift, and go to state 17
    TOK_LT         shift, and go to state 18
    TOK_LE         shift, and go to state 19
    TOK_GT         shift, and go to state 20
    TOK_GE         shift, and go to state 21
    TOK_NOT        shift, and go to state 22
    TOK_IDENT      shift, and go to state 23
    TOK_INTCON     shift, and go to state 24
    TOK_CHARCON    shift, and go to state 25
    TOK_STRINGCON  shift, and go to state 26
    TOK_ROOT       shift, and go to state 27
    '}'            shift, and go to state 28
    ';'            shift, and go to state 29
    '='            shift, and go to state 30
    '{'            shift, and go to state 31
    '['            shift, and go to state 32
    ']'            shift, and go to state 33
    '('            shift, and go to state 34
    ')'            shift, and go to state 35
    ','            shift, and go to state 36
    '+'            shift, and go to state 37
    '-'            shift, and go to state 38
    '*'            shift, and go to state 39
    '/'            shift, and go to state 40
    '%'            shift, and go to state 41

    vardecl    go to state 42
    structdef  go to state 43
    type       go to state 44
    plaintype  go to state 45
    token      go to state 46


State 2

    0 $accept: program $end .

    $default  accept


State 3

    3 program: program error . '}'
    4        | program error . ';'

    '}'  shift, and go to state 47
    ';'  shift, and go to state 48


State 4

   11 plaintype: TOK_INT .
   31 token: TOK_INT .

    TOK_IDENT  reduce using rule 11 (plaintype)
    TOK_IDENT  [reduce using rule 31 (token)]
    $default   reduce using rule 31 (token)


State 5

   12 plaintype: TOK_STRING .
   32 token: TOK_STRING .

    TOK_IDENT  reduce using rule 12 (plaintype)
    TOK_IDENT  [reduce using rule 32 (token)]
    $default   reduce using rule 32 (token)


State 6

   33 token: TOK_IF .

    $default  reduce using rule 33 (token)


State 7

   34 token: TOK_ELSE .

    $default  reduce using rule 34 (token)


State 8

   35 token: TOK_WHILE .

    $default  reduce using rule 35 (token)


State 9

   36 token: TOK_RETURN .

    $default  reduce using rule 36 (token)


State 10

    8 structdef: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 49


State 11

   37 token: TOK_NULLPTR .

    $default  reduce using rule 37 (token)


State 12

   10 type: TOK_ARRAY . '[' plaintype ']'
   38 token: TOK_ARRAY .

    '['  shift, and go to state 50

    '['       [reduce using rule 38 (token)]
    $default  reduce using rule 38 (token)


State 13

   39 token: TOK_ARROW .

    $default  reduce using rule 39 (token)


State 14

   40 token: TOK_ALLOC .

    $default  reduce using rule 40 (token)


State 15

   13 plaintype: TOK_PTR .
   29 token: TOK_PTR .

    TOK_IDENT  reduce using rule 13 (plaintype)
    TOK_IDENT  [reduce using rule 29 (token)]
    $default   reduce using rule 29 (token)


State 16

   41 token: TOK_EQ .

    $default  reduce using rule 41 (token)


State 17

   42 token: TOK_NE .

    $default  reduce using rule 42 (token)


State 18

   43 token: TOK_LT .

    $default  reduce using rule 43 (token)


State 19

   44 token: TOK_LE .

    $default  reduce using rule 44 (token)


State 20

   45 token: TOK_GT .

    $default  reduce using rule 45 (token)


State 21

   46 token: TOK_GE .

    $default  reduce using rule 46 (token)


State 22

   28 token: TOK_NOT .

    $default  reduce using rule 28 (token)


State 23

   47 token: TOK_IDENT .

    $default  reduce using rule 47 (token)


State 24

   48 token: TOK_INTCON .

    $default  reduce using rule 48 (token)


State 25

   49 token: TOK_CHARCON .

    $default  reduce using rule 49 (token)


State 26

   50 token: TOK_STRINGCON .

    $default  reduce using rule 50 (token)


State 27

   30 token: TOK_ROOT . TOK_VOID

    TOK_VOID  shift, and go to state 51


State 28

   19 token: '}' .

    $default  reduce using rule 19 (token)


State 29

   21 token: ';' .

    $default  reduce using rule 21 (token)


State 30

   22 token: '=' .

    $default  reduce using rule 22 (token)


State 31

   20 token: '{' .

    $default  reduce using rule 20 (token)


State 32

   16 token: '[' .

    $default  reduce using rule 16 (token)


State 33

   17 token: ']' .

    $default  reduce using rule 17 (token)


State 34

   14 token: '(' .

    $default  reduce using rule 14 (token)


State 35

   15 token: ')' .

    $default  reduce using rule 15 (token)


State 36

   18 token: ',' .

    $default  reduce using rule 18 (token)


State 37

   23 token: '+' .

    $default  reduce using rule 23 (token)


State 38

   24 token: '-' .

    $default  reduce using rule 24 (token)


State 39

   25 token: '*' .

    $default  reduce using rule 25 (token)


State 40

   26 token: '/' .

    $default  reduce using rule 26 (token)


State 41

   27 token: '%' .

    $default  reduce using rule 27 (token)


State 42

    2 program: program vardecl .

    $default  reduce using rule 2 (program)


State 43

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 44

    7 vardecl: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 52


State 45

    9 type: plaintype .

    $default  reduce using rule 9 (type)


State 46

    5 program: program token .

    $default  reduce using rule 5 (program)


State 47

    3 program: program error '}' .

    $default  reduce using rule 3 (program)


State 48

    4 program: program error ';' .

    $default  reduce using rule 4 (program)


State 49

    8 structdef: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT '}' ';'

    '{'  shift, and go to state 53


State 50

   10 type: TOK_ARRAY '[' . plaintype ']'

    TOK_INT     shift, and go to state 54
    TOK_STRING  shift, and go to state 55
    TOK_PTR     shift, and go to state 56

    plaintype  go to state 57


State 51

   30 token: TOK_ROOT TOK_VOID .

    $default  reduce using rule 30 (token)


State 52

    7 vardecl: type TOK_IDENT .

    $default  reduce using rule 7 (vardecl)


State 53

    8 structdef: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT '}' ';'

    TOK_INT     shift, and go to state 54
    TOK_STRING  shift, and go to state 55
    TOK_ARRAY   shift, and go to state 58
    TOK_PTR     shift, and go to state 56

    type       go to state 59
    plaintype  go to state 45


State 54

   11 plaintype: TOK_INT .

    $default  reduce using rule 11 (plaintype)


State 55

   12 plaintype: TOK_STRING .

    $default  reduce using rule 12 (plaintype)


State 56

   13 plaintype: TOK_PTR .

    $default  reduce using rule 13 (plaintype)


State 57

   10 type: TOK_ARRAY '[' plaintype . ']'

    ']'  shift, and go to state 60


State 58

   10 type: TOK_ARRAY . '[' plaintype ']'

    '['  shift, and go to state 50


State 59

    8 structdef: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 61


State 60

   10 type: TOK_ARRAY '[' plaintype ']' .

    $default  reduce using rule 10 (type)


State 61

    8 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . '}' ';'

    '}'  shift, and go to state 62


State 62

    8 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' . ';'

    ';'  shift, and go to state 63


State 63

    8 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';' .

    $default  reduce using rule 8 (structdef)
