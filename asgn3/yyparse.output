Nonterminals useless in grammar

    start


Terminals unused in grammar

    TOK_BLOCK
    TOK_CALL
    '^'


Rules useless in grammar

   74 start: program


Rules useless in parser due to conflicts

   35 returntype: plaintype


State 5 conflicts: 1 reduce/reduce
State 6 conflicts: 1 reduce/reduce
State 16 conflicts: 1 reduce/reduce
State 47 conflicts: 1 reduce/reduce
State 89 conflicts: 2 shift/reduce
State 90 conflicts: 2 shift/reduce
State 91 conflicts: 2 shift/reduce
State 92 conflicts: 2 shift/reduce
State 93 conflicts: 2 shift/reduce
State 94 conflicts: 7 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program vardecl
    4        | program error '}'
    5        | program error ';'
    6        | program token
    7        | %empty

    8 vardecl: type TOK_IDENT ';'
    9        | type TOK_IDENT '=' expr ';'

   10 expr: expr '+' expr
   11     | expr '-' expr
   12     | expr '*' expr
   13     | expr '/' expr
   14     | expr '%' expr
   15     | variable
   16     | call
   17     | constant

   18 constant: TOK_INTCON
   19         | TOK_STRINGCON
   20         | TOK_CHARCON

   21 function: returntype TOK_IDENT '(' ')' block

   22 call: TOK_IDENT '(' expr ')'

   23 block: '{' statement '}'

   24 statement: vardecl
   25          | block
   26          | expr ';'

   27 variable: TOK_IDENT
   28         | expr ',' expr
   29         | expr TOK_ARROW TOK_IDENT

   30 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';'

   31 type: plaintype

   32 plaintype: TOK_INT
   33          | TOK_STRING
   34          | TOK_PTR

   35 returntype: plaintype
   36           | TOK_VOID

   37 token: '('
   38      | ')'
   39      | '['
   40      | ']'
   41      | ','
   42      | '}'
   43      | '{'
   44      | ';'
   45      | '='
   46      | '+'
   47      | '-'
   48      | '*'
   49      | '/'
   50      | '%'
   51      | TOK_NOT
   52      | TOK_PTR
   53      | TOK_ROOT TOK_VOID
   54      | TOK_INT
   55      | TOK_STRING
   56      | TOK_IF
   57      | TOK_ELSE
   58      | TOK_WHILE
   59      | TOK_RETURN
   60      | TOK_NULLPTR
   61      | TOK_ARRAY
   62      | TOK_ARROW
   63      | TOK_ALLOC
   64      | TOK_EQ
   65      | TOK_NE
   66      | TOK_LT
   67      | TOK_LE
   68      | TOK_GT
   69      | TOK_GE
   70      | TOK_IDENT
   71      | TOK_INTCON
   72      | TOK_CHARCON
   73      | TOK_STRINGCON


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 14 50
    '(' (40) 21 22 37
    ')' (41) 21 22 38
    '*' (42) 12 48
    '+' (43) 10 46
    ',' (44) 28 41
    '-' (45) 11 47
    '/' (47) 13 49
    ';' (59) 5 8 9 26 30 44
    '=' (61) 9 45
    '[' (91) 39
    ']' (93) 40
    '^' (94)
    '{' (123) 23 30 43
    '}' (125) 4 23 30 42
    error (256) 4 5
    TOK_VOID (258) 36 53
    TOK_INT (259) 32 54
    TOK_STRING (260) 33 55
    TOK_IF (261) 56
    TOK_ELSE (262) 57
    TOK_WHILE (263) 58
    TOK_RETURN (264) 59
    TOK_STRUCT (265) 30
    TOK_NULLPTR (266) 60
    TOK_ARRAY (267) 61
    TOK_ARROW (268) 29 62
    TOK_ALLOC (269) 63
    TOK_PTR (270) 34 52
    TOK_EQ (271) 64
    TOK_NE (272) 65
    TOK_LT (273) 66
    TOK_LE (274) 67
    TOK_GT (275) 68
    TOK_GE (276) 69
    TOK_NOT (277) 51
    TOK_IDENT (278) 8 9 21 22 27 29 30 70
    TOK_INTCON (279) 18 71
    TOK_CHARCON (280) 20 72
    TOK_STRINGCON (281) 19 73
    TOK_ROOT (282) 53
    TOK_BLOCK (283)
    TOK_CALL (284)


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program (46)
        on left: 1 2 3 4 5 6 7
        on right: 0 1 2 3 4 5 6
    vardecl (47)
        on left: 8 9
        on right: 3 24
    expr (48)
        on left: 10 11 12 13 14 15 16 17
        on right: 9 10 11 12 13 14 22 26 28 29
    constant (49)
        on left: 18 19 20
        on right: 17
    function (50)
        on left: 21
        on right: 2
    call (51)
        on left: 22
        on right: 16
    block (52)
        on left: 23
        on right: 21 25
    statement (53)
        on left: 24 25 26
        on right: 23
    variable (54)
        on left: 27 28 29
        on right: 15
    structdef (55)
        on left: 30
        on right: 1
    type (56)
        on left: 31
        on right: 8 9 30
    plaintype (57)
        on left: 32 33 34
        on right: 31 35
    returntype (58)
        on left: 35 36
        on right: 21
    token (59)
        on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73
        on right: 6


State 0

    0 $accept: . program $end

    $default  reduce using rule 7 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . vardecl
    4        | program . error '}'
    5        | program . error ';'
    6        | program . token

    $end           shift, and go to state 2
    error          shift, and go to state 3
    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 7
    TOK_ELSE       shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ARROW      shift, and go to state 14
    TOK_ALLOC      shift, and go to state 15
    TOK_PTR        shift, and go to state 16
    TOK_EQ         shift, and go to state 17
    TOK_NE         shift, and go to state 18
    TOK_LT         shift, and go to state 19
    TOK_LE         shift, and go to state 20
    TOK_GT         shift, and go to state 21
    TOK_GE         shift, and go to state 22
    TOK_NOT        shift, and go to state 23
    TOK_IDENT      shift, and go to state 24
    TOK_INTCON     shift, and go to state 25
    TOK_CHARCON    shift, and go to state 26
    TOK_STRINGCON  shift, and go to state 27
    TOK_ROOT       shift, and go to state 28
    '='            shift, and go to state 29
    '+'            shift, and go to state 30
    '-'            shift, and go to state 31
    '*'            shift, and go to state 32
    '/'            shift, and go to state 33
    '%'            shift, and go to state 34
    '}'            shift, and go to state 35
    ';'            shift, and go to state 36
    '('            shift, and go to state 37
    ')'            shift, and go to state 38
    '{'            shift, and go to state 39
    ','            shift, and go to state 40
    '['            shift, and go to state 41
    ']'            shift, and go to state 42

    vardecl     go to state 43
    function    go to state 44
    structdef   go to state 45
    type        go to state 46
    plaintype   go to state 47
    returntype  go to state 48
    token       go to state 49


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 50
    ';'  shift, and go to state 51


State 4

   36 returntype: TOK_VOID .

    $default  reduce using rule 36 (returntype)


State 5

   32 plaintype: TOK_INT .
   54 token: TOK_INT .

    TOK_IDENT  reduce using rule 32 (plaintype)
    TOK_IDENT  [reduce using rule 54 (token)]
    $default   reduce using rule 54 (token)


State 6

   33 plaintype: TOK_STRING .
   55 token: TOK_STRING .

    TOK_IDENT  reduce using rule 33 (plaintype)
    TOK_IDENT  [reduce using rule 55 (token)]
    $default   reduce using rule 55 (token)


State 7

   56 token: TOK_IF .

    $default  reduce using rule 56 (token)


State 8

   57 token: TOK_ELSE .

    $default  reduce using rule 57 (token)


State 9

   58 token: TOK_WHILE .

    $default  reduce using rule 58 (token)


State 10

   59 token: TOK_RETURN .

    $default  reduce using rule 59 (token)


State 11

   30 structdef: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 52


State 12

   60 token: TOK_NULLPTR .

    $default  reduce using rule 60 (token)


State 13

   61 token: TOK_ARRAY .

    $default  reduce using rule 61 (token)


State 14

   62 token: TOK_ARROW .

    $default  reduce using rule 62 (token)


State 15

   63 token: TOK_ALLOC .

    $default  reduce using rule 63 (token)


State 16

   34 plaintype: TOK_PTR .
   52 token: TOK_PTR .

    TOK_IDENT  reduce using rule 34 (plaintype)
    TOK_IDENT  [reduce using rule 52 (token)]
    $default   reduce using rule 52 (token)


State 17

   64 token: TOK_EQ .

    $default  reduce using rule 64 (token)


State 18

   65 token: TOK_NE .

    $default  reduce using rule 65 (token)


State 19

   66 token: TOK_LT .

    $default  reduce using rule 66 (token)


State 20

   67 token: TOK_LE .

    $default  reduce using rule 67 (token)


State 21

   68 token: TOK_GT .

    $default  reduce using rule 68 (token)


State 22

   69 token: TOK_GE .

    $default  reduce using rule 69 (token)


State 23

   51 token: TOK_NOT .

    $default  reduce using rule 51 (token)


State 24

   70 token: TOK_IDENT .

    $default  reduce using rule 70 (token)


State 25

   71 token: TOK_INTCON .

    $default  reduce using rule 71 (token)


State 26

   72 token: TOK_CHARCON .

    $default  reduce using rule 72 (token)


State 27

   73 token: TOK_STRINGCON .

    $default  reduce using rule 73 (token)


State 28

   53 token: TOK_ROOT . TOK_VOID

    TOK_VOID  shift, and go to state 53


State 29

   45 token: '=' .

    $default  reduce using rule 45 (token)


State 30

   46 token: '+' .

    $default  reduce using rule 46 (token)


State 31

   47 token: '-' .

    $default  reduce using rule 47 (token)


State 32

   48 token: '*' .

    $default  reduce using rule 48 (token)


State 33

   49 token: '/' .

    $default  reduce using rule 49 (token)


State 34

   50 token: '%' .

    $default  reduce using rule 50 (token)


State 35

   42 token: '}' .

    $default  reduce using rule 42 (token)


State 36

   44 token: ';' .

    $default  reduce using rule 44 (token)


State 37

   37 token: '(' .

    $default  reduce using rule 37 (token)


State 38

   38 token: ')' .

    $default  reduce using rule 38 (token)


State 39

   43 token: '{' .

    $default  reduce using rule 43 (token)


State 40

   41 token: ',' .

    $default  reduce using rule 41 (token)


State 41

   39 token: '[' .

    $default  reduce using rule 39 (token)


State 42

   40 token: ']' .

    $default  reduce using rule 40 (token)


State 43

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 44

    2 program: program function .

    $default  reduce using rule 2 (program)


State 45

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 46

    8 vardecl: type . TOK_IDENT ';'
    9        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 54


State 47

   31 type: plaintype .
   35 returntype: plaintype .

    TOK_IDENT  reduce using rule 31 (type)
    TOK_IDENT  [reduce using rule 35 (returntype)]
    $default   reduce using rule 31 (type)


State 48

   21 function: returntype . TOK_IDENT '(' ')' block

    TOK_IDENT  shift, and go to state 55


State 49

    6 program: program token .

    $default  reduce using rule 6 (program)


State 50

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 51

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 52

   30 structdef: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT '}' ';'

    '{'  shift, and go to state 56


State 53

   53 token: TOK_ROOT TOK_VOID .

    $default  reduce using rule 53 (token)


State 54

    8 vardecl: type TOK_IDENT . ';'
    9        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 57
    ';'  shift, and go to state 58


State 55

   21 function: returntype TOK_IDENT . '(' ')' block

    '('  shift, and go to state 59


State 56

   30 structdef: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT '}' ';'

    TOK_INT     shift, and go to state 60
    TOK_STRING  shift, and go to state 61
    TOK_PTR     shift, and go to state 62

    type       go to state 63
    plaintype  go to state 64


State 57

    9 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_IDENT      shift, and go to state 65
    TOK_INTCON     shift, and go to state 66
    TOK_CHARCON    shift, and go to state 67
    TOK_STRINGCON  shift, and go to state 68

    expr      go to state 69
    constant  go to state 70
    call      go to state 71
    variable  go to state 72


State 58

    8 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 8 (vardecl)


State 59

   21 function: returntype TOK_IDENT '(' . ')' block

    ')'  shift, and go to state 73


State 60

   32 plaintype: TOK_INT .

    $default  reduce using rule 32 (plaintype)


State 61

   33 plaintype: TOK_STRING .

    $default  reduce using rule 33 (plaintype)


State 62

   34 plaintype: TOK_PTR .

    $default  reduce using rule 34 (plaintype)


State 63

   30 structdef: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 74


State 64

   31 type: plaintype .

    $default  reduce using rule 31 (type)


State 65

   22 call: TOK_IDENT . '(' expr ')'
   27 variable: TOK_IDENT .

    '('  shift, and go to state 75

    $default  reduce using rule 27 (variable)


State 66

   18 constant: TOK_INTCON .

    $default  reduce using rule 18 (constant)


State 67

   20 constant: TOK_CHARCON .

    $default  reduce using rule 20 (constant)


State 68

   19 constant: TOK_STRINGCON .

    $default  reduce using rule 19 (constant)


State 69

    9 vardecl: type TOK_IDENT '=' expr . ';'
   10 expr: expr . '+' expr
   11     | expr . '-' expr
   12     | expr . '*' expr
   13     | expr . '/' expr
   14     | expr . '%' expr
   28 variable: expr . ',' expr
   29         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ';'        shift, and go to state 82
    ','        shift, and go to state 83


State 70

   17 expr: constant .

    $default  reduce using rule 17 (expr)


State 71

   16 expr: call .

    $default  reduce using rule 16 (expr)


State 72

   15 expr: variable .

    $default  reduce using rule 15 (expr)


State 73

   21 function: returntype TOK_IDENT '(' ')' . block

    '{'  shift, and go to state 84

    block  go to state 85


State 74

   30 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . '}' ';'

    '}'  shift, and go to state 86


State 75

   22 call: TOK_IDENT '(' . expr ')'

    TOK_IDENT      shift, and go to state 65
    TOK_INTCON     shift, and go to state 66
    TOK_CHARCON    shift, and go to state 67
    TOK_STRINGCON  shift, and go to state 68

    expr      go to state 87
    constant  go to state 70
    call      go to state 71
    variable  go to state 72


State 76

   29 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 88


State 77

   10 expr: expr '+' . expr

    TOK_IDENT      shift, and go to state 65
    TOK_INTCON     shift, and go to state 66
    TOK_CHARCON    shift, and go to state 67
    TOK_STRINGCON  shift, and go to state 68

    expr      go to state 89
    constant  go to state 70
    call      go to state 71
    variable  go to state 72


State 78

   11 expr: expr '-' . expr

    TOK_IDENT      shift, and go to state 65
    TOK_INTCON     shift, and go to state 66
    TOK_CHARCON    shift, and go to state 67
    TOK_STRINGCON  shift, and go to state 68

    expr      go to state 90
    constant  go to state 70
    call      go to state 71
    variable  go to state 72


State 79

   12 expr: expr '*' . expr

    TOK_IDENT      shift, and go to state 65
    TOK_INTCON     shift, and go to state 66
    TOK_CHARCON    shift, and go to state 67
    TOK_STRINGCON  shift, and go to state 68

    expr      go to state 91
    constant  go to state 70
    call      go to state 71
    variable  go to state 72


State 80

   13 expr: expr '/' . expr

    TOK_IDENT      shift, and go to state 65
    TOK_INTCON     shift, and go to state 66
    TOK_CHARCON    shift, and go to state 67
    TOK_STRINGCON  shift, and go to state 68

    expr      go to state 92
    constant  go to state 70
    call      go to state 71
    variable  go to state 72


State 81

   14 expr: expr '%' . expr

    TOK_IDENT      shift, and go to state 65
    TOK_INTCON     shift, and go to state 66
    TOK_CHARCON    shift, and go to state 67
    TOK_STRINGCON  shift, and go to state 68

    expr      go to state 93
    constant  go to state 70
    call      go to state 71
    variable  go to state 72


State 82

    9 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 9 (vardecl)


State 83

   28 variable: expr ',' . expr

    TOK_IDENT      shift, and go to state 65
    TOK_INTCON     shift, and go to state 66
    TOK_CHARCON    shift, and go to state 67
    TOK_STRINGCON  shift, and go to state 68

    expr      go to state 94
    constant  go to state 70
    call      go to state 71
    variable  go to state 72


State 84

   23 block: '{' . statement '}'

    TOK_INT        shift, and go to state 60
    TOK_STRING     shift, and go to state 61
    TOK_PTR        shift, and go to state 62
    TOK_IDENT      shift, and go to state 65
    TOK_INTCON     shift, and go to state 66
    TOK_CHARCON    shift, and go to state 67
    TOK_STRINGCON  shift, and go to state 68
    '{'            shift, and go to state 84

    vardecl    go to state 95
    expr       go to state 96
    constant   go to state 70
    call       go to state 71
    block      go to state 97
    statement  go to state 98
    variable   go to state 72
    type       go to state 46
    plaintype  go to state 64


State 85

   21 function: returntype TOK_IDENT '(' ')' block .

    $default  reduce using rule 21 (function)


State 86

   30 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' . ';'

    ';'  shift, and go to state 99


State 87

   10 expr: expr . '+' expr
   11     | expr . '-' expr
   12     | expr . '*' expr
   13     | expr . '/' expr
   14     | expr . '%' expr
   22 call: TOK_IDENT '(' expr . ')'
   28 variable: expr . ',' expr
   29         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ')'        shift, and go to state 100
    ','        shift, and go to state 83


State 88

   29 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 29 (variable)


State 89

   10 expr: expr . '+' expr
   10     | expr '+' expr .
   11     | expr . '-' expr
   12     | expr . '*' expr
   13     | expr . '/' expr
   14     | expr . '%' expr
   28 variable: expr . ',' expr
   29         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ','        shift, and go to state 83

    TOK_ARROW  [reduce using rule 10 (expr)]
    ','        [reduce using rule 10 (expr)]
    $default   reduce using rule 10 (expr)


State 90

   10 expr: expr . '+' expr
   11     | expr . '-' expr
   11     | expr '-' expr .
   12     | expr . '*' expr
   13     | expr . '/' expr
   14     | expr . '%' expr
   28 variable: expr . ',' expr
   29         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ','        shift, and go to state 83

    TOK_ARROW  [reduce using rule 11 (expr)]
    ','        [reduce using rule 11 (expr)]
    $default   reduce using rule 11 (expr)


State 91

   10 expr: expr . '+' expr
   11     | expr . '-' expr
   12     | expr . '*' expr
   12     | expr '*' expr .
   13     | expr . '/' expr
   14     | expr . '%' expr
   28 variable: expr . ',' expr
   29         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    ','        shift, and go to state 83

    TOK_ARROW  [reduce using rule 12 (expr)]
    ','        [reduce using rule 12 (expr)]
    $default   reduce using rule 12 (expr)


State 92

   10 expr: expr . '+' expr
   11     | expr . '-' expr
   12     | expr . '*' expr
   13     | expr . '/' expr
   13     | expr '/' expr .
   14     | expr . '%' expr
   28 variable: expr . ',' expr
   29         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    ','        shift, and go to state 83

    TOK_ARROW  [reduce using rule 13 (expr)]
    ','        [reduce using rule 13 (expr)]
    $default   reduce using rule 13 (expr)


State 93

   10 expr: expr . '+' expr
   11     | expr . '-' expr
   12     | expr . '*' expr
   13     | expr . '/' expr
   14     | expr . '%' expr
   14     | expr '%' expr .
   28 variable: expr . ',' expr
   29         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    ','        shift, and go to state 83

    TOK_ARROW  [reduce using rule 14 (expr)]
    ','        [reduce using rule 14 (expr)]
    $default   reduce using rule 14 (expr)


State 94

   10 expr: expr . '+' expr
   11     | expr . '-' expr
   12     | expr . '*' expr
   13     | expr . '/' expr
   14     | expr . '%' expr
   28 variable: expr . ',' expr
   28         | expr ',' expr .
   29         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ','        shift, and go to state 83

    TOK_ARROW  [reduce using rule 28 (variable)]
    '+'        [reduce using rule 28 (variable)]
    '-'        [reduce using rule 28 (variable)]
    '*'        [reduce using rule 28 (variable)]
    '/'        [reduce using rule 28 (variable)]
    '%'        [reduce using rule 28 (variable)]
    ','        [reduce using rule 28 (variable)]
    $default   reduce using rule 28 (variable)


State 95

   24 statement: vardecl .

    $default  reduce using rule 24 (statement)


State 96

   10 expr: expr . '+' expr
   11     | expr . '-' expr
   12     | expr . '*' expr
   13     | expr . '/' expr
   14     | expr . '%' expr
   26 statement: expr . ';'
   28 variable: expr . ',' expr
   29         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ';'        shift, and go to state 101
    ','        shift, and go to state 83


State 97

   25 statement: block .

    $default  reduce using rule 25 (statement)


State 98

   23 block: '{' statement . '}'

    '}'  shift, and go to state 102


State 99

   30 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';' .

    $default  reduce using rule 30 (structdef)


State 100

   22 call: TOK_IDENT '(' expr ')' .

    $default  reduce using rule 22 (call)


State 101

   26 statement: expr ';' .

    $default  reduce using rule 26 (statement)


State 102

   23 block: '{' statement '}' .

    $default  reduce using rule 23 (block)
