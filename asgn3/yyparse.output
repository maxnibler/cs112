Nonterminals useless in grammar

    start


Terminals unused in grammar

    TOK_NOT
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    TOK_FUNC
    TOK_TYPE_ID
    TOK_PARAM
    '^'


Rules useless in grammar

   69 start: program


State 10 conflicts: 5 shift/reduce
State 12 conflicts: 1 shift/reduce
State 26 conflicts: 5 shift/reduce
State 27 conflicts: 7 shift/reduce
State 42 conflicts: 1 shift/reduce
State 49 conflicts: 18 shift/reduce
State 53 conflicts: 1 shift/reduce
State 58 conflicts: 8 shift/reduce
State 88 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program vardecl
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: TOK_STRUCT TOK_IDENT '{'
    8          | structdef type TOK_IDENT ';'
    9          | structdef '}' ';'

   10 type: plaintype
   11     | TOK_ARRAY

   12 plaintype: TOK_INT
   13          | TOK_STRING
   14          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   15          | TOK_VOID

   16 function: plaintype TOK_IDENT
   17         | function parameters
   18         | function block

   19 parameters: '('
   20           | parameters type TOK_IDENT
   21           | parameters ',' type TOK_IDENT
   22           | parameters ')'

   23 block: '{'
   24      | block statement
   25      | block '}'

   26 statement: vardecl
   27          | expr ';'
   28          | block
   29          | while
   30          | ifelse
   31          | return
   32          | ';'

   33 vardecl: type TOK_IDENT ';'
   34        | type TOK_IDENT '=' expr ';'

   35 while: TOK_WHILE '(' expr ')' statement

   36 ifelse: TOK_IF '(' expr ')' statement
   37       | ifelse TOK_ELSE statement

   38 return: TOK_RETURN expr ';'
   39       | TOK_RETURN ';'

   40 expr: expr '+' expr
   41     | expr '-' expr
   42     | expr '*' expr
   43     | expr '/' expr
   44     | expr '%' expr
   45     | expr '=' expr
   46     | expr TOK_GT expr
   47     | expr TOK_LT expr
   48     | expr TOK_LE expr
   49     | expr TOK_GE expr
   50     | expr TOK_EQ expr
   51     | expr TOK_NE expr
   52     | variable
   53     | call
   54     | constant
   55     | allocator
   56     | '(' expr ')'

   57 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   58          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   59          | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

   60 constant: TOK_INTCON
   61         | TOK_STRINGCON
   62         | TOK_CHARCON
   63         | TOK_NULLPTR

   64 call: TOK_IDENT '('
   65     | call expr
   66     | call ')'

   67 variable: TOK_IDENT
   68         | expr TOK_ARROW TOK_IDENT


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 44
    '(' (40) 19 35 36 56 57 58 59 64
    ')' (41) 22 35 36 56 57 58 59 66
    '*' (42) 42
    '+' (43) 40
    ',' (44) 21
    '-' (45) 41
    '/' (47) 43
    ';' (59) 5 8 9 27 32 33 34 38 39
    '=' (61) 34 45
    '^' (94)
    '{' (123) 7 23
    '}' (125) 4 9 25
    error (256) 4 5
    TOK_VOID (258) 15
    TOK_INT (259) 12
    TOK_STRING (260) 13 57
    TOK_IF (261) 36
    TOK_ELSE (262) 37
    TOK_WHILE (263) 35
    TOK_RETURN (264) 38 39
    TOK_STRUCT (265) 7 14 58
    TOK_NULLPTR (266) 63
    TOK_ARRAY (267) 11 59
    TOK_ARROW (268) 68
    TOK_ALLOC (269) 57 58 59
    TOK_PTR (270) 14
    TOK_EQ (271) 50
    TOK_NE (272) 51
    TOK_LT (273) 14 47 57 58 59
    TOK_LE (274) 48
    TOK_GT (275) 14 46 57 58 59
    TOK_GE (276) 49
    TOK_NOT (277)
    TOK_IDENT (278) 7 8 14 16 20 21 33 34 58 64 67 68
    TOK_INTCON (279) 60
    TOK_CHARCON (280) 62
    TOK_STRINGCON (281) 61
    TOK_ROOT (282)
    TOK_BLOCK (283)
    TOK_CALL (284)
    TOK_FUNC (285)
    TOK_TYPE_ID (286)
    TOK_PARAM (287)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    program (47)
        on left: 1 2 3 4 5 6
        on right: 0 1 2 3 4 5
    structdef (48)
        on left: 7 8 9
        on right: 1 8 9
    type (49)
        on left: 10 11
        on right: 8 20 21 33 34
    plaintype (50)
        on left: 12 13 14 15
        on right: 10 16 59
    function (51)
        on left: 16 17 18
        on right: 2 17 18
    parameters (52)
        on left: 19 20 21 22
        on right: 17 20 21 22
    block (53)
        on left: 23 24 25
        on right: 18 24 25 28
    statement (54)
        on left: 26 27 28 29 30 31 32
        on right: 24 35 36 37
    vardecl (55)
        on left: 33 34
        on right: 3 26
    while (56)
        on left: 35
        on right: 29
    ifelse (57)
        on left: 36 37
        on right: 30 37
    return (58)
        on left: 38 39
        on right: 31
    expr (59)
        on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56
        on right: 27 34 35 36 38 40 41 42 43 44 45 46 47 48 49 50 51 56 57 59 65 68
    allocator (60)
        on left: 57 58 59
        on right: 55
    constant (61)
        on left: 60 61 62 63
        on right: 54
    call (62)
        on left: 64 65 66
        on right: 53 65 66
    variable (63)
        on left: 67 68
        on right: 52


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . vardecl
    4        | program . error '}'
    5        | program . error ';'

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    structdef  go to state 10
    type       go to state 11
    plaintype  go to state 12
    function   go to state 13
    vardecl    go to state 14


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 15
    ';'  shift, and go to state 16


State 4

   15 plaintype: TOK_VOID .

    $default  reduce using rule 15 (plaintype)


State 5

   12 plaintype: TOK_INT .

    $default  reduce using rule 12 (plaintype)


State 6

   13 plaintype: TOK_STRING .

    $default  reduce using rule 13 (plaintype)


State 7

    7 structdef: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 17


State 8

   11 type: TOK_ARRAY .

    $default  reduce using rule 11 (type)


State 9

   14 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 18


State 10

    1 program: program structdef .
    8 structdef: structdef . type TOK_IDENT ';'
    9          | structdef . '}' ';'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    '}'         shift, and go to state 19

    TOK_VOID    [reduce using rule 1 (program)]
    TOK_INT     [reduce using rule 1 (program)]
    TOK_STRING  [reduce using rule 1 (program)]
    TOK_ARRAY   [reduce using rule 1 (program)]
    TOK_PTR     [reduce using rule 1 (program)]
    $default    reduce using rule 1 (program)

    type       go to state 20
    plaintype  go to state 21


State 11

   33 vardecl: type . TOK_IDENT ';'
   34        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 22


State 12

   10 type: plaintype .
   16 function: plaintype . TOK_IDENT

    TOK_IDENT  shift, and go to state 23

    TOK_IDENT  [reduce using rule 10 (type)]


State 13

    2 program: program function .
   17 function: function . parameters
   18         | function . block

    '{'  shift, and go to state 24
    '('  shift, and go to state 25

    $default  reduce using rule 2 (program)

    parameters  go to state 26
    block       go to state 27


State 14

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 15

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 16

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 17

    7 structdef: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 28


State 18

   14 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 29


State 19

    9 structdef: structdef '}' . ';'

    ';'  shift, and go to state 30


State 20

    8 structdef: structdef type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 31


State 21

   10 type: plaintype .

    $default  reduce using rule 10 (type)


State 22

   33 vardecl: type TOK_IDENT . ';'
   34        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 32
    ';'  shift, and go to state 33


State 23

   16 function: plaintype TOK_IDENT .

    $default  reduce using rule 16 (function)


State 24

   23 block: '{' .

    $default  reduce using rule 23 (block)


State 25

   19 parameters: '(' .

    $default  reduce using rule 19 (parameters)


State 26

   17 function: function parameters .
   20 parameters: parameters . type TOK_IDENT
   21           | parameters . ',' type TOK_IDENT
   22           | parameters . ')'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    ','         shift, and go to state 34
    ')'         shift, and go to state 35

    TOK_VOID    [reduce using rule 17 (function)]
    TOK_INT     [reduce using rule 17 (function)]
    TOK_STRING  [reduce using rule 17 (function)]
    TOK_ARRAY   [reduce using rule 17 (function)]
    TOK_PTR     [reduce using rule 17 (function)]
    $default    reduce using rule 17 (function)

    type       go to state 36
    plaintype  go to state 21


State 27

   18 function: function block .
   24 block: block . statement
   25      | block . '}'

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 37
    TOK_WHILE      shift, and go to state 38
    TOK_RETURN     shift, and go to state 39
    TOK_NULLPTR    shift, and go to state 40
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 41
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '}'            shift, and go to state 46
    ';'            shift, and go to state 47
    '{'            shift, and go to state 24
    '('            shift, and go to state 48

    TOK_VOID    [reduce using rule 18 (function)]
    TOK_INT     [reduce using rule 18 (function)]
    TOK_STRING  [reduce using rule 18 (function)]
    TOK_ARRAY   [reduce using rule 18 (function)]
    TOK_PTR     [reduce using rule 18 (function)]
    '{'         [reduce using rule 18 (function)]
    '('         [reduce using rule 18 (function)]
    $default    reduce using rule 18 (function)

    type       go to state 11
    plaintype  go to state 21
    block      go to state 49
    statement  go to state 50
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 28

    7 structdef: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 7 (structdef)


State 29

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 60


State 30

    9 structdef: structdef '}' ';' .

    $default  reduce using rule 9 (structdef)


State 31

    8 structdef: structdef type TOK_IDENT . ';'

    ';'  shift, and go to state 61


State 32

   34 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 62
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 33

   33 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 33 (vardecl)


State 34

   21 parameters: parameters ',' . type TOK_IDENT

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 63
    plaintype  go to state 21


State 35

   22 parameters: parameters ')' .

    $default  reduce using rule 22 (parameters)


State 36

   20 parameters: parameters type . TOK_IDENT

    TOK_IDENT  shift, and go to state 64


State 37

   36 ifelse: TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 65


State 38

   35 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 66


State 39

   38 return: TOK_RETURN . expr ';'
   39       | TOK_RETURN . ';'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    ';'            shift, and go to state 67
    '('            shift, and go to state 48

    expr       go to state 68
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 40

   63 constant: TOK_NULLPTR .

    $default  reduce using rule 63 (constant)


State 41

   57 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   58          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   59          | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 69


State 42

   64 call: TOK_IDENT . '('
   67 variable: TOK_IDENT .

    '('  shift, and go to state 70

    '('       [reduce using rule 67 (variable)]
    $default  reduce using rule 67 (variable)


State 43

   60 constant: TOK_INTCON .

    $default  reduce using rule 60 (constant)


State 44

   62 constant: TOK_CHARCON .

    $default  reduce using rule 62 (constant)


State 45

   61 constant: TOK_STRINGCON .

    $default  reduce using rule 61 (constant)


State 46

   25 block: block '}' .

    $default  reduce using rule 25 (block)


State 47

   32 statement: ';' .

    $default  reduce using rule 32 (statement)


State 48

   56 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 71
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 49

   24 block: block . statement
   25      | block . '}'
   28 statement: block .

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 37
    TOK_WHILE      shift, and go to state 38
    TOK_RETURN     shift, and go to state 39
    TOK_NULLPTR    shift, and go to state 40
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 41
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '}'            shift, and go to state 46
    ';'            shift, and go to state 47
    '{'            shift, and go to state 24
    '('            shift, and go to state 48

    TOK_VOID       [reduce using rule 28 (statement)]
    TOK_INT        [reduce using rule 28 (statement)]
    TOK_STRING     [reduce using rule 28 (statement)]
    TOK_IF         [reduce using rule 28 (statement)]
    TOK_WHILE      [reduce using rule 28 (statement)]
    TOK_RETURN     [reduce using rule 28 (statement)]
    TOK_NULLPTR    [reduce using rule 28 (statement)]
    TOK_ARRAY      [reduce using rule 28 (statement)]
    TOK_ALLOC      [reduce using rule 28 (statement)]
    TOK_PTR        [reduce using rule 28 (statement)]
    TOK_IDENT      [reduce using rule 28 (statement)]
    TOK_INTCON     [reduce using rule 28 (statement)]
    TOK_CHARCON    [reduce using rule 28 (statement)]
    TOK_STRINGCON  [reduce using rule 28 (statement)]
    '}'            [reduce using rule 28 (statement)]
    ';'            [reduce using rule 28 (statement)]
    '{'            [reduce using rule 28 (statement)]
    '('            [reduce using rule 28 (statement)]
    $default       reduce using rule 28 (statement)

    type       go to state 11
    plaintype  go to state 21
    block      go to state 49
    statement  go to state 50
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 50

   24 block: block statement .

    $default  reduce using rule 24 (block)


State 51

   26 statement: vardecl .

    $default  reduce using rule 26 (statement)


State 52

   29 statement: while .

    $default  reduce using rule 29 (statement)


State 53

   30 statement: ifelse .
   37 ifelse: ifelse . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 72

    TOK_ELSE  [reduce using rule 30 (statement)]
    $default  reduce using rule 30 (statement)


State 54

   31 statement: return .

    $default  reduce using rule 31 (statement)


State 55

   27 statement: expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '='        shift, and go to state 80
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85
    ';'        shift, and go to state 86


State 56

   55 expr: allocator .

    $default  reduce using rule 55 (expr)


State 57

   54 expr: constant .

    $default  reduce using rule 54 (expr)


State 58

   53 expr: call .
   65 call: call . expr
   66     | call . ')'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48
    ')'            shift, and go to state 87

    TOK_NULLPTR    [reduce using rule 53 (expr)]
    TOK_ALLOC      [reduce using rule 53 (expr)]
    TOK_IDENT      [reduce using rule 53 (expr)]
    TOK_INTCON     [reduce using rule 53 (expr)]
    TOK_CHARCON    [reduce using rule 53 (expr)]
    TOK_STRINGCON  [reduce using rule 53 (expr)]
    '('            [reduce using rule 53 (expr)]
    ')'            [reduce using rule 53 (expr)]
    $default       reduce using rule 53 (expr)

    expr       go to state 88
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 59

   52 expr: variable .

    $default  reduce using rule 52 (expr)


State 60

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 89


State 61

    8 structdef: structdef type TOK_IDENT ';' .

    $default  reduce using rule 8 (structdef)


State 62

   34 vardecl: type TOK_IDENT '=' expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '='        shift, and go to state 80
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85
    ';'        shift, and go to state 90


State 63

   21 parameters: parameters ',' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 91


State 64

   20 parameters: parameters type TOK_IDENT .

    $default  reduce using rule 20 (parameters)


State 65

   36 ifelse: TOK_IF '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 92
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 66

   35 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 93
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 67

   39 return: TOK_RETURN ';' .

    $default  reduce using rule 39 (return)


State 68

   38 return: TOK_RETURN expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '='        shift, and go to state 80
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85
    ';'        shift, and go to state 94


State 69

   57 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   58          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   59          | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_STRING  shift, and go to state 95
    TOK_STRUCT  shift, and go to state 96
    TOK_ARRAY   shift, and go to state 97


State 70

   64 call: TOK_IDENT '(' .

    $default  reduce using rule 64 (call)


State 71

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   56     | '(' expr . ')'
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '='        shift, and go to state 80
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85
    ')'        shift, and go to state 98


State 72

   37 ifelse: ifelse TOK_ELSE . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 37
    TOK_WHILE      shift, and go to state 38
    TOK_RETURN     shift, and go to state 39
    TOK_NULLPTR    shift, and go to state 40
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 41
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    ';'            shift, and go to state 47
    '{'            shift, and go to state 24
    '('            shift, and go to state 48

    type       go to state 11
    plaintype  go to state 21
    block      go to state 49
    statement  go to state 99
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 73

   68 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 100


State 74

   50 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 101
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 75

   51 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 102
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 76

   47 expr: expr TOK_LT . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 103
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 77

   48 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 104
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 78

   46 expr: expr TOK_GT . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 105
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 79

   49 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 106
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 80

   45 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 107
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 81

   40 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 108
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 82

   41 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 109
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 83

   42 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 110
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 84

   43 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 111
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 85

   44 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 112
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 86

   27 statement: expr ';' .

    $default  reduce using rule 27 (statement)


State 87

   66 call: call ')' .

    $default  reduce using rule 66 (call)


State 88

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   65 call: call expr .
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '='        shift, and go to state 80
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 65 (call)]
    TOK_EQ     [reduce using rule 65 (call)]
    TOK_NE     [reduce using rule 65 (call)]
    TOK_LT     [reduce using rule 65 (call)]
    TOK_LE     [reduce using rule 65 (call)]
    TOK_GT     [reduce using rule 65 (call)]
    TOK_GE     [reduce using rule 65 (call)]
    '='        [reduce using rule 65 (call)]
    '+'        [reduce using rule 65 (call)]
    '-'        [reduce using rule 65 (call)]
    '*'        [reduce using rule 65 (call)]
    '/'        [reduce using rule 65 (call)]
    '%'        [reduce using rule 65 (call)]
    $default   reduce using rule 65 (call)


State 89

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 14 (plaintype)


State 90

   34 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 34 (vardecl)


State 91

   21 parameters: parameters ',' type TOK_IDENT .

    $default  reduce using rule 21 (parameters)


State 92

   36 ifelse: TOK_IF '(' expr . ')' statement
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '='        shift, and go to state 80
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85
    ')'        shift, and go to state 113


State 93

   35 while: TOK_WHILE '(' expr . ')' statement
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '='        shift, and go to state 80
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85
    ')'        shift, and go to state 114


State 94

   38 return: TOK_RETURN expr ';' .

    $default  reduce using rule 38 (return)


State 95

   57 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 115


State 96

   58 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 116


State 97

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 117


State 98

   56 expr: '(' expr ')' .

    $default  reduce using rule 56 (expr)


State 99

   37 ifelse: ifelse TOK_ELSE statement .

    $default  reduce using rule 37 (ifelse)


State 100

   68 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 68 (variable)


State 101

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   50     | expr TOK_EQ expr .
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85

    $default  reduce using rule 50 (expr)


State 102

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   51     | expr TOK_NE expr .
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85

    $default  reduce using rule 51 (expr)


State 103

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   47     | expr TOK_LT expr .
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85

    $default  reduce using rule 47 (expr)


State 104

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   48     | expr TOK_LE expr .
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85

    $default  reduce using rule 48 (expr)


State 105

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   46     | expr TOK_GT expr .
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85

    $default  reduce using rule 46 (expr)


State 106

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   49     | expr TOK_GE expr .
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85

    $default  reduce using rule 49 (expr)


State 107

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   45     | expr '=' expr .
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '='        shift, and go to state 80
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85

    $default  reduce using rule 45 (expr)


State 108

   40 expr: expr . '+' expr
   40     | expr '+' expr .
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85

    $default  reduce using rule 40 (expr)


State 109

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   41     | expr '-' expr .
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85

    $default  reduce using rule 41 (expr)


State 110

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   42     | expr '*' expr .
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73

    $default  reduce using rule 42 (expr)


State 111

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   43     | expr '/' expr .
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73

    $default  reduce using rule 43 (expr)


State 112

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   44     | expr '%' expr .
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73

    $default  reduce using rule 44 (expr)


State 113

   36 ifelse: TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 37
    TOK_WHILE      shift, and go to state 38
    TOK_RETURN     shift, and go to state 39
    TOK_NULLPTR    shift, and go to state 40
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 41
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    ';'            shift, and go to state 47
    '{'            shift, and go to state 24
    '('            shift, and go to state 48

    type       go to state 11
    plaintype  go to state 21
    block      go to state 49
    statement  go to state 118
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 114

   35 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 37
    TOK_WHILE      shift, and go to state 38
    TOK_RETURN     shift, and go to state 39
    TOK_NULLPTR    shift, and go to state 40
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 41
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    ';'            shift, and go to state 47
    '{'            shift, and go to state 24
    '('            shift, and go to state 48

    type       go to state 11
    plaintype  go to state 21
    block      go to state 49
    statement  go to state 119
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 115

   57 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 120


State 116

   58 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 121


State 117

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_PTR     shift, and go to state 9

    plaintype  go to state 122


State 118

   36 ifelse: TOK_IF '(' expr ')' statement .

    $default  reduce using rule 36 (ifelse)


State 119

   35 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 35 (while)


State 120

   57 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 123
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 121

   58 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 124


State 122

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype . TOK_GT TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 125


State 123

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   57 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '='        shift, and go to state 80
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85
    ')'        shift, and go to state 126


State 124

   58 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 127


State 125

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 128


State 126

   57 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 57 (allocator)


State 127

   58 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 58 (allocator)


State 128

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT . '(' expr ')'

    '('  shift, and go to state 129


State 129

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 48

    expr       go to state 130
    allocator  go to state 56
    constant   go to state 57
    call       go to state 58
    variable   go to state 59


State 130

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GE expr
   50     | expr . TOK_EQ expr
   51     | expr . TOK_NE expr
   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr . ')'
   68 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '='        shift, and go to state 80
    '+'        shift, and go to state 81
    '-'        shift, and go to state 82
    '*'        shift, and go to state 83
    '/'        shift, and go to state 84
    '%'        shift, and go to state 85
    ')'        shift, and go to state 131


State 131

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')' .

    $default  reduce using rule 59 (allocator)
