Nonterminals useless in grammar

    start


Terminals unused in grammar

    TOK_IF
    TOK_ELSE
    TOK_NULLPTR
    TOK_EQ
    TOK_NE
    TOK_LE
    TOK_GE
    TOK_NOT
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    TOK_FUNC
    TOK_TYPE_ID
    TOK_PARAM
    '^'


Rules useless in grammar

   51 start: program


State 12 conflicts: 1 shift/reduce
State 58 conflicts: 5 shift/reduce
State 77 conflicts: 16 shift/reduce
State 83 conflicts: 5 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program vardecl
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' '}' ';'

    8 type: plaintype
    9     | TOK_ARRAY

   10 plaintype: TOK_INT
   11          | TOK_STRING
   12          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   13          | TOK_VOID

   14 function: plaintype TOK_IDENT '(' ')' block
   15         | plaintype TOK_IDENT '(' parameters ')' block

   16 parameters: type TOK_IDENT
   17           | parameters ',' type TOK_IDENT

   18 block: '{'
   19      | block statement
   20      | '}'

   21 statement: vardecl
   22          | expr ';'
   23          | block
   24          | while
   25          | return
   26          | ';'

   27 vardecl: type TOK_IDENT ';'
   28        | type TOK_IDENT '=' expr ';'

   29 while: TOK_WHILE '(' expr ')' statement

   30 expr: expr '+' expr
   31     | expr '-' expr
   32     | expr '*' expr
   33     | expr '/' expr
   34     | expr '%' expr
   35     | expr '=' expr
   36     | variable
   37     | call
   38     | constant
   39     | allocator
   40     | '(' expr ')'

   41 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   42          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'

   43 constant: TOK_INTCON
   44         | TOK_STRINGCON
   45         | TOK_CHARCON

   46 call: TOK_IDENT '(' expr ')'

   47 return: TOK_RETURN expr ';'
   48       | TOK_RETURN ';'

   49 variable: TOK_IDENT
   50         | expr TOK_ARROW TOK_IDENT


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 34
    '(' (40) 14 15 29 40 41 42 46
    ')' (41) 14 15 29 40 41 42 46
    '*' (42) 32
    '+' (43) 30
    ',' (44) 17
    '-' (45) 31
    '/' (47) 33
    ';' (59) 5 7 22 26 27 28 47 48
    '=' (61) 28 35
    '^' (94)
    '{' (123) 7 18
    '}' (125) 4 7 20
    error (256) 4 5
    TOK_VOID (258) 13
    TOK_INT (259) 10
    TOK_STRING (260) 11 41
    TOK_IF (261)
    TOK_ELSE (262)
    TOK_WHILE (263) 29
    TOK_RETURN (264) 47 48
    TOK_STRUCT (265) 7 12 42
    TOK_NULLPTR (266)
    TOK_ARRAY (267) 9
    TOK_ARROW (268) 50
    TOK_ALLOC (269) 41 42
    TOK_PTR (270) 12
    TOK_EQ (271)
    TOK_NE (272)
    TOK_LT (273) 12 41 42
    TOK_LE (274)
    TOK_GT (275) 12 41 42
    TOK_GE (276)
    TOK_NOT (277)
    TOK_IDENT (278) 7 12 14 15 16 17 27 28 42 46 49 50
    TOK_INTCON (279) 43
    TOK_CHARCON (280) 45
    TOK_STRINGCON (281) 44
    TOK_ROOT (282)
    TOK_BLOCK (283)
    TOK_CALL (284)
    TOK_FUNC (285)
    TOK_TYPE_ID (286)
    TOK_PARAM (287)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    program (47)
        on left: 1 2 3 4 5 6
        on right: 0 1 2 3 4 5
    structdef (48)
        on left: 7
        on right: 1
    type (49)
        on left: 8 9
        on right: 7 16 17 27 28
    plaintype (50)
        on left: 10 11 12 13
        on right: 8 14 15
    function (51)
        on left: 14 15
        on right: 2
    parameters (52)
        on left: 16 17
        on right: 15 17
    block (53)
        on left: 18 19 20
        on right: 14 15 19 23
    statement (54)
        on left: 21 22 23 24 25 26
        on right: 19 29
    vardecl (55)
        on left: 27 28
        on right: 3 21
    while (56)
        on left: 29
        on right: 24
    expr (57)
        on left: 30 31 32 33 34 35 36 37 38 39 40
        on right: 22 28 29 30 31 32 33 34 35 40 41 46 47 50
    allocator (58)
        on left: 41 42
        on right: 39
    constant (59)
        on left: 43 44 45
        on right: 38
    call (60)
        on left: 46
        on right: 37
    return (61)
        on left: 47 48
        on right: 25
    variable (62)
        on left: 49 50
        on right: 36


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . vardecl
    4        | program . error '}'
    5        | program . error ';'

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    structdef  go to state 10
    type       go to state 11
    plaintype  go to state 12
    function   go to state 13
    vardecl    go to state 14


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 15
    ';'  shift, and go to state 16


State 4

   13 plaintype: TOK_VOID .

    $default  reduce using rule 13 (plaintype)


State 5

   10 plaintype: TOK_INT .

    $default  reduce using rule 10 (plaintype)


State 6

   11 plaintype: TOK_STRING .

    $default  reduce using rule 11 (plaintype)


State 7

    7 structdef: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';' '}' ';'

    TOK_IDENT  shift, and go to state 17


State 8

    9 type: TOK_ARRAY .

    $default  reduce using rule 9 (type)


State 9

   12 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 18


State 10

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 11

   27 vardecl: type . TOK_IDENT ';'
   28        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 19


State 12

    8 type: plaintype .
   14 function: plaintype . TOK_IDENT '(' ')' block
   15         | plaintype . TOK_IDENT '(' parameters ')' block

    TOK_IDENT  shift, and go to state 20

    TOK_IDENT  [reduce using rule 8 (type)]


State 13

    2 program: program function .

    $default  reduce using rule 2 (program)


State 14

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 15

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 16

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 17

    7 structdef: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';' '}' ';'

    '{'  shift, and go to state 21


State 18

   12 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 22


State 19

   27 vardecl: type TOK_IDENT . ';'
   28        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 23
    ';'  shift, and go to state 24


State 20

   14 function: plaintype TOK_IDENT . '(' ')' block
   15         | plaintype TOK_IDENT . '(' parameters ')' block

    '('  shift, and go to state 25


State 21

    7 structdef: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';' '}' ';'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 26
    plaintype  go to state 27


State 22

   12 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 28


State 23

   28 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 35
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 24

   27 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 27 (vardecl)


State 25

   14 function: plaintype TOK_IDENT '(' . ')' block
   15         | plaintype TOK_IDENT '(' . parameters ')' block

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    ')'         shift, and go to state 40

    type        go to state 41
    plaintype   go to state 27
    parameters  go to state 42


State 26

    7 structdef: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';' '}' ';'

    TOK_IDENT  shift, and go to state 43


State 27

    8 type: plaintype .

    $default  reduce using rule 8 (type)


State 28

   12 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 44


State 29

   41 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   42          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'

    TOK_LT  shift, and go to state 45


State 30

   46 call: TOK_IDENT . '(' expr ')'
   49 variable: TOK_IDENT .

    '('  shift, and go to state 46

    $default  reduce using rule 49 (variable)


State 31

   43 constant: TOK_INTCON .

    $default  reduce using rule 43 (constant)


State 32

   45 constant: TOK_CHARCON .

    $default  reduce using rule 45 (constant)


State 33

   44 constant: TOK_STRINGCON .

    $default  reduce using rule 44 (constant)


State 34

   40 expr: '(' . expr ')'

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 47
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 35

   28 vardecl: type TOK_IDENT '=' expr . ';'
   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '='        shift, and go to state 49
    '+'        shift, and go to state 50
    '-'        shift, and go to state 51
    '*'        shift, and go to state 52
    '/'        shift, and go to state 53
    '%'        shift, and go to state 54
    ';'        shift, and go to state 55


State 36

   39 expr: allocator .

    $default  reduce using rule 39 (expr)


State 37

   38 expr: constant .

    $default  reduce using rule 38 (expr)


State 38

   37 expr: call .

    $default  reduce using rule 37 (expr)


State 39

   36 expr: variable .

    $default  reduce using rule 36 (expr)


State 40

   14 function: plaintype TOK_IDENT '(' ')' . block

    '}'  shift, and go to state 56
    '{'  shift, and go to state 57

    block  go to state 58


State 41

   16 parameters: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 59


State 42

   15 function: plaintype TOK_IDENT '(' parameters . ')' block
   17 parameters: parameters . ',' type TOK_IDENT

    ')'  shift, and go to state 60
    ','  shift, and go to state 61


State 43

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';' '}' ';'

    ';'  shift, and go to state 62


State 44

   12 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 12 (plaintype)


State 45

   41 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   42          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'

    TOK_STRING  shift, and go to state 63
    TOK_STRUCT  shift, and go to state 64


State 46

   46 call: TOK_IDENT '(' . expr ')'

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 65
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 47

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   40     | '(' expr . ')'
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '='        shift, and go to state 49
    '+'        shift, and go to state 50
    '-'        shift, and go to state 51
    '*'        shift, and go to state 52
    '/'        shift, and go to state 53
    '%'        shift, and go to state 54
    ')'        shift, and go to state 66


State 48

   50 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 67


State 49

   35 expr: expr '=' . expr

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 68
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 50

   30 expr: expr '+' . expr

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 69
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 51

   31 expr: expr '-' . expr

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 70
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 52

   32 expr: expr '*' . expr

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 71
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 53

   33 expr: expr '/' . expr

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 72
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 54

   34 expr: expr '%' . expr

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 73
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 55

   28 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 28 (vardecl)


State 56

   20 block: '}' .

    $default  reduce using rule 20 (block)


State 57

   18 block: '{' .

    $default  reduce using rule 18 (block)


State 58

   14 function: plaintype TOK_IDENT '(' ')' block .
   19 block: block . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_WHILE      shift, and go to state 74
    TOK_RETURN     shift, and go to state 75
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 29
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '}'            shift, and go to state 56
    ';'            shift, and go to state 76
    '{'            shift, and go to state 57
    '('            shift, and go to state 34

    TOK_VOID    [reduce using rule 14 (function)]
    TOK_INT     [reduce using rule 14 (function)]
    TOK_STRING  [reduce using rule 14 (function)]
    TOK_ARRAY   [reduce using rule 14 (function)]
    TOK_PTR     [reduce using rule 14 (function)]
    $default    reduce using rule 14 (function)

    type       go to state 11
    plaintype  go to state 27
    block      go to state 77
    statement  go to state 78
    vardecl    go to state 79
    while      go to state 80
    expr       go to state 81
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    return     go to state 82
    variable   go to state 39


State 59

   16 parameters: type TOK_IDENT .

    $default  reduce using rule 16 (parameters)


State 60

   15 function: plaintype TOK_IDENT '(' parameters ')' . block

    '}'  shift, and go to state 56
    '{'  shift, and go to state 57

    block  go to state 83


State 61

   17 parameters: parameters ',' . type TOK_IDENT

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 84
    plaintype  go to state 27


State 62

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' . '}' ';'

    '}'  shift, and go to state 85


State 63

   41 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 86


State 64

   42 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 87


State 65

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   46 call: TOK_IDENT '(' expr . ')'
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '='        shift, and go to state 49
    '+'        shift, and go to state 50
    '-'        shift, and go to state 51
    '*'        shift, and go to state 52
    '/'        shift, and go to state 53
    '%'        shift, and go to state 54
    ')'        shift, and go to state 88


State 66

   40 expr: '(' expr ')' .

    $default  reduce using rule 40 (expr)


State 67

   50 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 50 (variable)


State 68

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   35     | expr '=' expr .
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '='        shift, and go to state 49
    '+'        shift, and go to state 50
    '-'        shift, and go to state 51
    '*'        shift, and go to state 52
    '/'        shift, and go to state 53
    '%'        shift, and go to state 54

    $default  reduce using rule 35 (expr)


State 69

   30 expr: expr . '+' expr
   30     | expr '+' expr .
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '*'        shift, and go to state 52
    '/'        shift, and go to state 53
    '%'        shift, and go to state 54

    $default  reduce using rule 30 (expr)


State 70

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   31     | expr '-' expr .
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '*'        shift, and go to state 52
    '/'        shift, and go to state 53
    '%'        shift, and go to state 54

    $default  reduce using rule 31 (expr)


State 71

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   32     | expr '*' expr .
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48

    $default  reduce using rule 32 (expr)


State 72

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   33     | expr '/' expr .
   34     | expr . '%' expr
   35     | expr . '=' expr
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48

    $default  reduce using rule 33 (expr)


State 73

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   34     | expr '%' expr .
   35     | expr . '=' expr
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48

    $default  reduce using rule 34 (expr)


State 74

   29 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 89


State 75

   47 return: TOK_RETURN . expr ';'
   48       | TOK_RETURN . ';'

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    ';'            shift, and go to state 90
    '('            shift, and go to state 34

    expr       go to state 91
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 76

   26 statement: ';' .

    $default  reduce using rule 26 (statement)


State 77

   19 block: block . statement
   23 statement: block .

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_WHILE      shift, and go to state 74
    TOK_RETURN     shift, and go to state 75
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 29
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '}'            shift, and go to state 56
    ';'            shift, and go to state 76
    '{'            shift, and go to state 57
    '('            shift, and go to state 34

    TOK_VOID       [reduce using rule 23 (statement)]
    TOK_INT        [reduce using rule 23 (statement)]
    TOK_STRING     [reduce using rule 23 (statement)]
    TOK_WHILE      [reduce using rule 23 (statement)]
    TOK_RETURN     [reduce using rule 23 (statement)]
    TOK_ARRAY      [reduce using rule 23 (statement)]
    TOK_ALLOC      [reduce using rule 23 (statement)]
    TOK_PTR        [reduce using rule 23 (statement)]
    TOK_IDENT      [reduce using rule 23 (statement)]
    TOK_INTCON     [reduce using rule 23 (statement)]
    TOK_CHARCON    [reduce using rule 23 (statement)]
    TOK_STRINGCON  [reduce using rule 23 (statement)]
    '}'            [reduce using rule 23 (statement)]
    ';'            [reduce using rule 23 (statement)]
    '{'            [reduce using rule 23 (statement)]
    '('            [reduce using rule 23 (statement)]
    $default       reduce using rule 23 (statement)

    type       go to state 11
    plaintype  go to state 27
    block      go to state 77
    statement  go to state 78
    vardecl    go to state 79
    while      go to state 80
    expr       go to state 81
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    return     go to state 82
    variable   go to state 39


State 78

   19 block: block statement .

    $default  reduce using rule 19 (block)


State 79

   21 statement: vardecl .

    $default  reduce using rule 21 (statement)


State 80

   24 statement: while .

    $default  reduce using rule 24 (statement)


State 81

   22 statement: expr . ';'
   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '='        shift, and go to state 49
    '+'        shift, and go to state 50
    '-'        shift, and go to state 51
    '*'        shift, and go to state 52
    '/'        shift, and go to state 53
    '%'        shift, and go to state 54
    ';'        shift, and go to state 92


State 82

   25 statement: return .

    $default  reduce using rule 25 (statement)


State 83

   15 function: plaintype TOK_IDENT '(' parameters ')' block .
   19 block: block . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_WHILE      shift, and go to state 74
    TOK_RETURN     shift, and go to state 75
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 29
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '}'            shift, and go to state 56
    ';'            shift, and go to state 76
    '{'            shift, and go to state 57
    '('            shift, and go to state 34

    TOK_VOID    [reduce using rule 15 (function)]
    TOK_INT     [reduce using rule 15 (function)]
    TOK_STRING  [reduce using rule 15 (function)]
    TOK_ARRAY   [reduce using rule 15 (function)]
    TOK_PTR     [reduce using rule 15 (function)]
    $default    reduce using rule 15 (function)

    type       go to state 11
    plaintype  go to state 27
    block      go to state 77
    statement  go to state 78
    vardecl    go to state 79
    while      go to state 80
    expr       go to state 81
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    return     go to state 82
    variable   go to state 39


State 84

   17 parameters: parameters ',' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 93


State 85

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' '}' . ';'

    ';'  shift, and go to state 94


State 86

   41 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 95


State 87

   42 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 96


State 88

   46 call: TOK_IDENT '(' expr ')' .

    $default  reduce using rule 46 (call)


State 89

   29 while: TOK_WHILE '(' . expr ')' statement

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 97
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 90

   48 return: TOK_RETURN ';' .

    $default  reduce using rule 48 (return)


State 91

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   47 return: TOK_RETURN expr . ';'
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '='        shift, and go to state 49
    '+'        shift, and go to state 50
    '-'        shift, and go to state 51
    '*'        shift, and go to state 52
    '/'        shift, and go to state 53
    '%'        shift, and go to state 54
    ';'        shift, and go to state 98


State 92

   22 statement: expr ';' .

    $default  reduce using rule 22 (statement)


State 93

   17 parameters: parameters ',' type TOK_IDENT .

    $default  reduce using rule 17 (parameters)


State 94

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' '}' ';' .

    $default  reduce using rule 7 (structdef)


State 95

   41 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_ALLOC      shift, and go to state 29
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '('            shift, and go to state 34

    expr       go to state 99
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    variable   go to state 39


State 96

   42 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 100


State 97

   29 while: TOK_WHILE '(' expr . ')' statement
   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '='        shift, and go to state 49
    '+'        shift, and go to state 50
    '-'        shift, and go to state 51
    '*'        shift, and go to state 52
    '/'        shift, and go to state 53
    '%'        shift, and go to state 54
    ')'        shift, and go to state 101


State 98

   47 return: TOK_RETURN expr ';' .

    $default  reduce using rule 47 (return)


State 99

   30 expr: expr . '+' expr
   31     | expr . '-' expr
   32     | expr . '*' expr
   33     | expr . '/' expr
   34     | expr . '%' expr
   35     | expr . '=' expr
   41 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   50 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 48
    '='        shift, and go to state 49
    '+'        shift, and go to state 50
    '-'        shift, and go to state 51
    '*'        shift, and go to state 52
    '/'        shift, and go to state 53
    '%'        shift, and go to state 54
    ')'        shift, and go to state 102


State 100

   42 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 103


State 101

   29 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_WHILE      shift, and go to state 74
    TOK_RETURN     shift, and go to state 75
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 29
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 30
    TOK_INTCON     shift, and go to state 31
    TOK_CHARCON    shift, and go to state 32
    TOK_STRINGCON  shift, and go to state 33
    '}'            shift, and go to state 56
    ';'            shift, and go to state 76
    '{'            shift, and go to state 57
    '('            shift, and go to state 34

    type       go to state 11
    plaintype  go to state 27
    block      go to state 77
    statement  go to state 104
    vardecl    go to state 79
    while      go to state 80
    expr       go to state 81
    allocator  go to state 36
    constant   go to state 37
    call       go to state 38
    return     go to state 82
    variable   go to state 39


State 102

   41 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 41 (allocator)


State 103

   42 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 42 (allocator)


State 104

   29 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 29 (while)
