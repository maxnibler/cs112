Terminals unused in grammar

    TOK_NOT
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    TOK_FUNC
    TOK_TYPE_ID
    TOK_PARAM


State 13 conflicts: 1 shift/reduce
State 28 conflicts: 5 shift/reduce
State 46 conflicts: 1 shift/reduce
State 57 conflicts: 1 shift/reduce
State 61 conflicts: 8 shift/reduce
State 95 conflicts: 14 shift/reduce
State 108 conflicts: 14 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program vardecl
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: structdec '}' ';'

    8 structdec: TOK_STRUCT TOK_IDENT '{'
    9          | structdec type TOK_IDENT ';'

   10 type: plaintype
   11     | TOK_ARRAY '<' plaintype '>'

   12 plaintype: TOK_INT
   13          | TOK_STRING
   14          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   15          | TOK_VOID

   16 function: plaintype TOK_IDENT
   17         | function parameters
   18         | function block

   19 parameters: '('
   20           | parameters type TOK_IDENT
   21           | parameters ',' type TOK_IDENT
   22           | parameters ')'

   23 block: body '}'

   24 body: '{'
   25     | body statement

   26 statement: vardecl
   27          | expr ';'
   28          | block
   29          | while
   30          | ifelse
   31          | return
   32          | ';'

   33 vardecl: type TOK_IDENT ';'
   34        | type TOK_IDENT '=' expr ';'

   35 while: TOK_WHILE '(' expr ')' statement

   36 ifelse: TOK_IF '(' expr ')' statement
   37       | ifelse TOK_ELSE statement

   38 return: TOK_RETURN expr ';'
   39       | TOK_RETURN ';'

   40 expr: expr binop expr
   41     | variable
   42     | call
   43     | constant
   44     | allocator
   45     | '(' expr ')'

   46 binop: '+'
   47      | '-'
   48      | '*'
   49      | '/'
   50      | '%'
   51      | '='
   52      | '^'
   53      | TOK_GT
   54      | TOK_GE
   55      | TOK_LT
   56      | TOK_LE
   57      | TOK_NE
   58      | TOK_EQ

   59 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   60          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   61          | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

   62 call: TOK_IDENT '('
   63     | call expr
   64     | call ')'

   65 variable: TOK_IDENT
   66         | expr TOK_ARROW TOK_IDENT

   67 constant: TOK_INTCON
   68         | TOK_STRINGCON
   69         | TOK_CHARCON
   70         | TOK_NULLPTR


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 50
    '(' (40) 19 35 36 45 59 60 61 62
    ')' (41) 22 35 36 45 59 60 61 64
    '*' (42) 48
    '+' (43) 46
    ',' (44) 21
    '-' (45) 47
    '/' (47) 49
    ';' (59) 5 7 9 27 32 33 34 38 39
    '<' (60) 11
    '=' (61) 34 51
    '>' (62) 11
    '^' (94) 52
    '{' (123) 8 24
    '}' (125) 4 7 23
    error (256) 4 5
    TOK_VOID (258) 15
    TOK_INT (259) 12
    TOK_STRING (260) 13 59
    TOK_IF (261) 36
    TOK_ELSE (262) 37
    TOK_WHILE (263) 35
    TOK_RETURN (264) 38 39
    TOK_STRUCT (265) 8 14 60
    TOK_NULLPTR (266) 70
    TOK_ARRAY (267) 11 61
    TOK_ARROW (268) 66
    TOK_ALLOC (269) 59 60 61
    TOK_PTR (270) 14
    TOK_EQ (271) 58
    TOK_NE (272) 57
    TOK_LT (273) 14 55 59 60 61
    TOK_LE (274) 56
    TOK_GT (275) 14 53 59 60 61
    TOK_GE (276) 54
    TOK_NOT (277)
    TOK_IDENT (278) 8 9 14 16 20 21 33 34 60 62 65 66
    TOK_INTCON (279) 67
    TOK_CHARCON (280) 69
    TOK_STRINGCON (281) 68
    TOK_ROOT (282)
    TOK_BLOCK (283)
    TOK_CALL (284)
    TOK_FUNC (285)
    TOK_TYPE_ID (286)
    TOK_PARAM (287)


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    program (49)
        on left: 1 2 3 4 5 6
        on right: 0 1 2 3 4 5
    structdef (50)
        on left: 7
        on right: 1
    structdec (51)
        on left: 8 9
        on right: 7 9
    type (52)
        on left: 10 11
        on right: 9 20 21 33 34
    plaintype (53)
        on left: 12 13 14 15
        on right: 10 11 16 61
    function (54)
        on left: 16 17 18
        on right: 2 17 18
    parameters (55)
        on left: 19 20 21 22
        on right: 17 20 21 22
    block (56)
        on left: 23
        on right: 18 28
    body (57)
        on left: 24 25
        on right: 23 25
    statement (58)
        on left: 26 27 28 29 30 31 32
        on right: 25 35 36 37
    vardecl (59)
        on left: 33 34
        on right: 3 26
    while (60)
        on left: 35
        on right: 29
    ifelse (61)
        on left: 36 37
        on right: 30 37
    return (62)
        on left: 38 39
        on right: 31
    expr (63)
        on left: 40 41 42 43 44 45
        on right: 27 34 35 36 38 40 45 59 61 63 66
    binop (64)
        on left: 46 47 48 49 50 51 52 53 54 55 56 57 58
        on right: 40
    allocator (65)
        on left: 59 60 61
        on right: 44
    call (66)
        on left: 62 63 64
        on right: 42 63 64
    variable (67)
        on left: 65 66
        on right: 41
    constant (68)
        on left: 67 68 69 70
        on right: 43


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . vardecl
    4        | program . error '}'
    5        | program . error ';'

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    structdef  go to state 10
    structdec  go to state 11
    type       go to state 12
    plaintype  go to state 13
    function   go to state 14
    vardecl    go to state 15


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 16
    ';'  shift, and go to state 17


State 4

   15 plaintype: TOK_VOID .

    $default  reduce using rule 15 (plaintype)


State 5

   12 plaintype: TOK_INT .

    $default  reduce using rule 12 (plaintype)


State 6

   13 plaintype: TOK_STRING .

    $default  reduce using rule 13 (plaintype)


State 7

    8 structdec: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 18


State 8

   11 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 19


State 9

   14 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 20


State 10

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 11

    7 structdef: structdec . '}' ';'
    9 structdec: structdec . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    '}'         shift, and go to state 21

    type       go to state 22
    plaintype  go to state 23


State 12

   33 vardecl: type . TOK_IDENT ';'
   34        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 24


State 13

   10 type: plaintype .
   16 function: plaintype . TOK_IDENT

    TOK_IDENT  shift, and go to state 25

    TOK_IDENT  [reduce using rule 10 (type)]


State 14

    2 program: program function .
   17 function: function . parameters
   18         | function . block

    '{'  shift, and go to state 26
    '('  shift, and go to state 27

    $default  reduce using rule 2 (program)

    parameters  go to state 28
    block       go to state 29
    body        go to state 30


State 15

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 16

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 17

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 18

    8 structdec: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 31


State 19

   11 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_PTR     shift, and go to state 9

    plaintype  go to state 32


State 20

   14 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 33


State 21

    7 structdef: structdec '}' . ';'

    ';'  shift, and go to state 34


State 22

    9 structdec: structdec type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 35


State 23

   10 type: plaintype .

    $default  reduce using rule 10 (type)


State 24

   33 vardecl: type TOK_IDENT . ';'
   34        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 36
    ';'  shift, and go to state 37


State 25

   16 function: plaintype TOK_IDENT .

    $default  reduce using rule 16 (function)


State 26

   24 body: '{' .

    $default  reduce using rule 24 (body)


State 27

   19 parameters: '(' .

    $default  reduce using rule 19 (parameters)


State 28

   17 function: function parameters .
   20 parameters: parameters . type TOK_IDENT
   21           | parameters . ',' type TOK_IDENT
   22           | parameters . ')'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    ','         shift, and go to state 38
    ')'         shift, and go to state 39

    TOK_VOID    [reduce using rule 17 (function)]
    TOK_INT     [reduce using rule 17 (function)]
    TOK_STRING  [reduce using rule 17 (function)]
    TOK_ARRAY   [reduce using rule 17 (function)]
    TOK_PTR     [reduce using rule 17 (function)]
    $default    reduce using rule 17 (function)

    type       go to state 40
    plaintype  go to state 23


State 29

   18 function: function block .

    $default  reduce using rule 18 (function)


State 30

   23 block: body . '}'
   25 body: body . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 41
    TOK_WHILE      shift, and go to state 42
    TOK_RETURN     shift, and go to state 43
    TOK_NULLPTR    shift, and go to state 44
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 45
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    '}'            shift, and go to state 50
    ';'            shift, and go to state 51
    '{'            shift, and go to state 26
    '('            shift, and go to state 52

    type       go to state 12
    plaintype  go to state 23
    block      go to state 53
    body       go to state 30
    statement  go to state 54
    vardecl    go to state 55
    while      go to state 56
    ifelse     go to state 57
    return     go to state 58
    expr       go to state 59
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 31

    8 structdec: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 8 (structdec)


State 32

   11 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 64


State 33

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 65


State 34

    7 structdef: structdec '}' ';' .

    $default  reduce using rule 7 (structdef)


State 35

    9 structdec: structdec type TOK_IDENT . ';'

    ';'  shift, and go to state 66


State 36

   34 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 44
    TOK_ALLOC      shift, and go to state 45
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    '('            shift, and go to state 52

    expr       go to state 67
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 37

   33 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 33 (vardecl)


State 38

   21 parameters: parameters ',' . type TOK_IDENT

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 68
    plaintype  go to state 23


State 39

   22 parameters: parameters ')' .

    $default  reduce using rule 22 (parameters)


State 40

   20 parameters: parameters type . TOK_IDENT

    TOK_IDENT  shift, and go to state 69


State 41

   36 ifelse: TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 70


State 42

   35 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 71


State 43

   38 return: TOK_RETURN . expr ';'
   39       | TOK_RETURN . ';'

    TOK_NULLPTR    shift, and go to state 44
    TOK_ALLOC      shift, and go to state 45
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    ';'            shift, and go to state 72
    '('            shift, and go to state 52

    expr       go to state 73
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 44

   70 constant: TOK_NULLPTR .

    $default  reduce using rule 70 (constant)


State 45

   59 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   60          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   61          | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 74


State 46

   62 call: TOK_IDENT . '('
   65 variable: TOK_IDENT .

    '('  shift, and go to state 75

    '('       [reduce using rule 65 (variable)]
    $default  reduce using rule 65 (variable)


State 47

   67 constant: TOK_INTCON .

    $default  reduce using rule 67 (constant)


State 48

   69 constant: TOK_CHARCON .

    $default  reduce using rule 69 (constant)


State 49

   68 constant: TOK_STRINGCON .

    $default  reduce using rule 68 (constant)


State 50

   23 block: body '}' .

    $default  reduce using rule 23 (block)


State 51

   32 statement: ';' .

    $default  reduce using rule 32 (statement)


State 52

   45 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 44
    TOK_ALLOC      shift, and go to state 45
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    '('            shift, and go to state 52

    expr       go to state 76
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 53

   28 statement: block .

    $default  reduce using rule 28 (statement)


State 54

   25 body: body statement .

    $default  reduce using rule 25 (body)


State 55

   26 statement: vardecl .

    $default  reduce using rule 26 (statement)


State 56

   29 statement: while .

    $default  reduce using rule 29 (statement)


State 57

   30 statement: ifelse .
   37 ifelse: ifelse . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 77

    TOK_ELSE  [reduce using rule 30 (statement)]
    $default  reduce using rule 30 (statement)


State 58

   31 statement: return .

    $default  reduce using rule 31 (statement)


State 59

   27 statement: expr . ';'
   40 expr: expr . binop expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '='        shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '^'        shift, and go to state 91
    ';'        shift, and go to state 92

    binop  go to state 93


State 60

   44 expr: allocator .

    $default  reduce using rule 44 (expr)


State 61

   42 expr: call .
   63 call: call . expr
   64     | call . ')'

    TOK_NULLPTR    shift, and go to state 44
    TOK_ALLOC      shift, and go to state 45
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    '('            shift, and go to state 52
    ')'            shift, and go to state 94

    TOK_NULLPTR    [reduce using rule 42 (expr)]
    TOK_ALLOC      [reduce using rule 42 (expr)]
    TOK_IDENT      [reduce using rule 42 (expr)]
    TOK_INTCON     [reduce using rule 42 (expr)]
    TOK_CHARCON    [reduce using rule 42 (expr)]
    TOK_STRINGCON  [reduce using rule 42 (expr)]
    '('            [reduce using rule 42 (expr)]
    ')'            [reduce using rule 42 (expr)]
    $default       reduce using rule 42 (expr)

    expr       go to state 95
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 62

   41 expr: variable .

    $default  reduce using rule 41 (expr)


State 63

   43 expr: constant .

    $default  reduce using rule 43 (expr)


State 64

   11 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 11 (type)


State 65

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 96


State 66

    9 structdec: structdec type TOK_IDENT ';' .

    $default  reduce using rule 9 (structdec)


State 67

   34 vardecl: type TOK_IDENT '=' expr . ';'
   40 expr: expr . binop expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '='        shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '^'        shift, and go to state 91
    ';'        shift, and go to state 97

    binop  go to state 93


State 68

   21 parameters: parameters ',' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 98


State 69

   20 parameters: parameters type TOK_IDENT .

    $default  reduce using rule 20 (parameters)


State 70

   36 ifelse: TOK_IF '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 44
    TOK_ALLOC      shift, and go to state 45
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    '('            shift, and go to state 52

    expr       go to state 99
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 71

   35 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 44
    TOK_ALLOC      shift, and go to state 45
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    '('            shift, and go to state 52

    expr       go to state 100
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 72

   39 return: TOK_RETURN ';' .

    $default  reduce using rule 39 (return)


State 73

   38 return: TOK_RETURN expr . ';'
   40 expr: expr . binop expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '='        shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '^'        shift, and go to state 91
    ';'        shift, and go to state 101

    binop  go to state 93


State 74

   59 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   60          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   61          | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_STRING  shift, and go to state 102
    TOK_STRUCT  shift, and go to state 103
    TOK_ARRAY   shift, and go to state 104


State 75

   62 call: TOK_IDENT '(' .

    $default  reduce using rule 62 (call)


State 76

   40 expr: expr . binop expr
   45     | '(' expr . ')'
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '='        shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '^'        shift, and go to state 91
    ')'        shift, and go to state 105

    binop  go to state 93


State 77

   37 ifelse: ifelse TOK_ELSE . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 41
    TOK_WHILE      shift, and go to state 42
    TOK_RETURN     shift, and go to state 43
    TOK_NULLPTR    shift, and go to state 44
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 45
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    ';'            shift, and go to state 51
    '{'            shift, and go to state 26
    '('            shift, and go to state 52

    type       go to state 12
    plaintype  go to state 23
    block      go to state 53
    body       go to state 30
    statement  go to state 106
    vardecl    go to state 55
    while      go to state 56
    ifelse     go to state 57
    return     go to state 58
    expr       go to state 59
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 78

   66 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 107


State 79

   58 binop: TOK_EQ .

    $default  reduce using rule 58 (binop)


State 80

   57 binop: TOK_NE .

    $default  reduce using rule 57 (binop)


State 81

   55 binop: TOK_LT .

    $default  reduce using rule 55 (binop)


State 82

   56 binop: TOK_LE .

    $default  reduce using rule 56 (binop)


State 83

   53 binop: TOK_GT .

    $default  reduce using rule 53 (binop)


State 84

   54 binop: TOK_GE .

    $default  reduce using rule 54 (binop)


State 85

   51 binop: '=' .

    $default  reduce using rule 51 (binop)


State 86

   46 binop: '+' .

    $default  reduce using rule 46 (binop)


State 87

   47 binop: '-' .

    $default  reduce using rule 47 (binop)


State 88

   48 binop: '*' .

    $default  reduce using rule 48 (binop)


State 89

   49 binop: '/' .

    $default  reduce using rule 49 (binop)


State 90

   50 binop: '%' .

    $default  reduce using rule 50 (binop)


State 91

   52 binop: '^' .

    $default  reduce using rule 52 (binop)


State 92

   27 statement: expr ';' .

    $default  reduce using rule 27 (statement)


State 93

   40 expr: expr binop . expr

    TOK_NULLPTR    shift, and go to state 44
    TOK_ALLOC      shift, and go to state 45
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    '('            shift, and go to state 52

    expr       go to state 108
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 94

   64 call: call ')' .

    $default  reduce using rule 64 (call)


State 95

   40 expr: expr . binop expr
   63 call: call expr .
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '='        shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '^'        shift, and go to state 91

    TOK_ARROW  [reduce using rule 63 (call)]
    TOK_EQ     [reduce using rule 63 (call)]
    TOK_NE     [reduce using rule 63 (call)]
    TOK_LT     [reduce using rule 63 (call)]
    TOK_LE     [reduce using rule 63 (call)]
    TOK_GT     [reduce using rule 63 (call)]
    TOK_GE     [reduce using rule 63 (call)]
    '='        [reduce using rule 63 (call)]
    '+'        [reduce using rule 63 (call)]
    '-'        [reduce using rule 63 (call)]
    '*'        [reduce using rule 63 (call)]
    '/'        [reduce using rule 63 (call)]
    '%'        [reduce using rule 63 (call)]
    '^'        [reduce using rule 63 (call)]
    $default   reduce using rule 63 (call)

    binop  go to state 93


State 96

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 14 (plaintype)


State 97

   34 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 34 (vardecl)


State 98

   21 parameters: parameters ',' type TOK_IDENT .

    $default  reduce using rule 21 (parameters)


State 99

   36 ifelse: TOK_IF '(' expr . ')' statement
   40 expr: expr . binop expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '='        shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '^'        shift, and go to state 91
    ')'        shift, and go to state 109

    binop  go to state 93


State 100

   35 while: TOK_WHILE '(' expr . ')' statement
   40 expr: expr . binop expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '='        shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '^'        shift, and go to state 91
    ')'        shift, and go to state 110

    binop  go to state 93


State 101

   38 return: TOK_RETURN expr ';' .

    $default  reduce using rule 38 (return)


State 102

   59 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 111


State 103

   60 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 112


State 104

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 113


State 105

   45 expr: '(' expr ')' .

    $default  reduce using rule 45 (expr)


State 106

   37 ifelse: ifelse TOK_ELSE statement .

    $default  reduce using rule 37 (ifelse)


State 107

   66 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 66 (variable)


State 108

   40 expr: expr . binop expr
   40     | expr binop expr .
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '='        shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '^'        shift, and go to state 91

    TOK_ARROW  [reduce using rule 40 (expr)]
    TOK_EQ     [reduce using rule 40 (expr)]
    TOK_NE     [reduce using rule 40 (expr)]
    TOK_LT     [reduce using rule 40 (expr)]
    TOK_LE     [reduce using rule 40 (expr)]
    TOK_GT     [reduce using rule 40 (expr)]
    TOK_GE     [reduce using rule 40 (expr)]
    '='        [reduce using rule 40 (expr)]
    '+'        [reduce using rule 40 (expr)]
    '-'        [reduce using rule 40 (expr)]
    '*'        [reduce using rule 40 (expr)]
    '/'        [reduce using rule 40 (expr)]
    '%'        [reduce using rule 40 (expr)]
    '^'        [reduce using rule 40 (expr)]
    $default   reduce using rule 40 (expr)

    binop  go to state 93


State 109

   36 ifelse: TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 41
    TOK_WHILE      shift, and go to state 42
    TOK_RETURN     shift, and go to state 43
    TOK_NULLPTR    shift, and go to state 44
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 45
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    ';'            shift, and go to state 51
    '{'            shift, and go to state 26
    '('            shift, and go to state 52

    type       go to state 12
    plaintype  go to state 23
    block      go to state 53
    body       go to state 30
    statement  go to state 114
    vardecl    go to state 55
    while      go to state 56
    ifelse     go to state 57
    return     go to state 58
    expr       go to state 59
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 110

   35 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 41
    TOK_WHILE      shift, and go to state 42
    TOK_RETURN     shift, and go to state 43
    TOK_NULLPTR    shift, and go to state 44
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 45
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    ';'            shift, and go to state 51
    '{'            shift, and go to state 26
    '('            shift, and go to state 52

    type       go to state 12
    plaintype  go to state 23
    block      go to state 53
    body       go to state 30
    statement  go to state 115
    vardecl    go to state 55
    while      go to state 56
    ifelse     go to state 57
    return     go to state 58
    expr       go to state 59
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 111

   59 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 116


State 112

   60 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 117


State 113

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_PTR     shift, and go to state 9

    plaintype  go to state 118


State 114

   36 ifelse: TOK_IF '(' expr ')' statement .

    $default  reduce using rule 36 (ifelse)


State 115

   35 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 35 (while)


State 116

   59 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 44
    TOK_ALLOC      shift, and go to state 45
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    '('            shift, and go to state 52

    expr       go to state 119
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 117

   60 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 120


State 118

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype . TOK_GT TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 121


State 119

   40 expr: expr . binop expr
   59 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '='        shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '^'        shift, and go to state 91
    ')'        shift, and go to state 122

    binop  go to state 93


State 120

   60 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 123


State 121

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 124


State 122

   59 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 59 (allocator)


State 123

   60 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 60 (allocator)


State 124

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT . '(' expr ')'

    '('  shift, and go to state 125


State 125

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 44
    TOK_ALLOC      shift, and go to state 45
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 47
    TOK_CHARCON    shift, and go to state 48
    TOK_STRINGCON  shift, and go to state 49
    '('            shift, and go to state 52

    expr       go to state 126
    allocator  go to state 60
    call       go to state 61
    variable   go to state 62
    constant   go to state 63


State 126

   40 expr: expr . binop expr
   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr . ')'
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '='        shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '^'        shift, and go to state 91
    ')'        shift, and go to state 127

    binop  go to state 93


State 127

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')' .

    $default  reduce using rule 61 (allocator)
