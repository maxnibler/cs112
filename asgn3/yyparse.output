Nonterminals useless in grammar

    start
    parameters


Terminals unused in grammar

    TOK_IF
    TOK_ELSE
    TOK_WHILE
    TOK_NULLPTR
    TOK_ALLOC
    TOK_EQ
    TOK_NE
    TOK_LT
    TOK_LE
    TOK_GT
    TOK_GE
    TOK_NOT
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    TOK_FUNC
    TOK_TYPE_ID
    '^'


Rules useless in grammar

   43 start: program

   44 parameters: type TOK_IDENT parameters
   45           | ',' type TOK_IDENT parameters
   46           | %empty


State 12 conflicts: 1 shift/reduce
State 49 conflicts: 5 shift/reduce
State 53 conflicts: 2 shift/reduce
State 54 conflicts: 2 shift/reduce
State 55 conflicts: 2 shift/reduce
State 56 conflicts: 2 shift/reduce
State 57 conflicts: 2 shift/reduce
State 58 conflicts: 2 shift/reduce
State 59 conflicts: 8 shift/reduce
State 61 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program vardecl
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';'

    8 type: plaintype
    9     | TOK_ARRAY

   10 plaintype: TOK_INT
   11          | TOK_STRING
   12          | TOK_PTR
   13          | TOK_VOID

   14 function: plaintype TOK_IDENT '(' ')' block

   15 block: '{'
   16      | block statement
   17      | '}'
   18      | ';'

   19 statement: vardecl
   20          | expr ';'
   21          | block
   22          | return

   23 vardecl: type TOK_IDENT ';'
   24        | type TOK_IDENT '=' expr ';'

   25 expr: expr '+' expr
   26     | expr '-' expr
   27     | expr '*' expr
   28     | expr '/' expr
   29     | expr '%' expr
   30     | expr '=' expr
   31     | variable
   32     | call
   33     | constant

   34 constant: TOK_INTCON
   35         | TOK_STRINGCON
   36         | TOK_CHARCON

   37 call: TOK_IDENT '(' expr ')'

   38 return: TOK_RETURN expr ';'
   39       | TOK_RETURN ';'

   40 variable: TOK_IDENT
   41         | expr ',' expr
   42         | expr TOK_ARROW TOK_IDENT


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 29
    '(' (40) 14 37
    ')' (41) 14 37
    '*' (42) 27
    '+' (43) 25
    ',' (44) 41
    '-' (45) 26
    '/' (47) 28
    ';' (59) 5 7 18 20 23 24 38 39
    '=' (61) 24 30
    '^' (94)
    '{' (123) 7 15
    '}' (125) 4 7 17
    error (256) 4 5
    TOK_VOID (258) 13
    TOK_INT (259) 10
    TOK_STRING (260) 11
    TOK_IF (261)
    TOK_ELSE (262)
    TOK_WHILE (263)
    TOK_RETURN (264) 38 39
    TOK_STRUCT (265) 7
    TOK_NULLPTR (266)
    TOK_ARRAY (267) 9
    TOK_ARROW (268) 42
    TOK_ALLOC (269)
    TOK_PTR (270) 12
    TOK_EQ (271)
    TOK_NE (272)
    TOK_LT (273)
    TOK_LE (274)
    TOK_GT (275)
    TOK_GE (276)
    TOK_NOT (277)
    TOK_IDENT (278) 7 14 23 24 37 40 42
    TOK_INTCON (279) 34
    TOK_CHARCON (280) 36
    TOK_STRINGCON (281) 35
    TOK_ROOT (282)
    TOK_BLOCK (283)
    TOK_CALL (284)
    TOK_FUNC (285)
    TOK_TYPE_ID (286)


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program (46)
        on left: 1 2 3 4 5 6
        on right: 0 1 2 3 4 5
    structdef (47)
        on left: 7
        on right: 1
    type (48)
        on left: 8 9
        on right: 7 23 24
    plaintype (49)
        on left: 10 11 12 13
        on right: 8 14
    function (50)
        on left: 14
        on right: 2
    block (51)
        on left: 15 16 17 18
        on right: 14 16 21
    statement (52)
        on left: 19 20 21 22
        on right: 16
    vardecl (53)
        on left: 23 24
        on right: 3 19
    expr (54)
        on left: 25 26 27 28 29 30 31 32 33
        on right: 20 24 25 26 27 28 29 30 37 38 41 42
    constant (55)
        on left: 34 35 36
        on right: 33
    call (56)
        on left: 37
        on right: 32
    return (57)
        on left: 38 39
        on right: 22
    variable (58)
        on left: 40 41 42
        on right: 31


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . vardecl
    4        | program . error '}'
    5        | program . error ';'

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    structdef  go to state 10
    type       go to state 11
    plaintype  go to state 12
    function   go to state 13
    vardecl    go to state 14


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 15
    ';'  shift, and go to state 16


State 4

   13 plaintype: TOK_VOID .

    $default  reduce using rule 13 (plaintype)


State 5

   10 plaintype: TOK_INT .

    $default  reduce using rule 10 (plaintype)


State 6

   11 plaintype: TOK_STRING .

    $default  reduce using rule 11 (plaintype)


State 7

    7 structdef: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 17


State 8

    9 type: TOK_ARRAY .

    $default  reduce using rule 9 (type)


State 9

   12 plaintype: TOK_PTR .

    $default  reduce using rule 12 (plaintype)


State 10

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 11

   23 vardecl: type . TOK_IDENT ';'
   24        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 18


State 12

    8 type: plaintype .
   14 function: plaintype . TOK_IDENT '(' ')' block

    TOK_IDENT  shift, and go to state 19

    TOK_IDENT  [reduce using rule 8 (type)]


State 13

    2 program: program function .

    $default  reduce using rule 2 (program)


State 14

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 15

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 16

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 17

    7 structdef: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT '}' ';'

    '{'  shift, and go to state 20


State 18

   23 vardecl: type TOK_IDENT . ';'
   24        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 21
    ';'  shift, and go to state 22


State 19

   14 function: plaintype TOK_IDENT . '(' ')' block

    '('  shift, and go to state 23


State 20

    7 structdef: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT '}' ';'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 24
    plaintype  go to state 25


State 21

   24 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 30
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 22

   23 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 23 (vardecl)


State 23

   14 function: plaintype TOK_IDENT '(' . ')' block

    ')'  shift, and go to state 34


State 24

    7 structdef: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 35


State 25

    8 type: plaintype .

    $default  reduce using rule 8 (type)


State 26

   37 call: TOK_IDENT . '(' expr ')'
   40 variable: TOK_IDENT .

    '('  shift, and go to state 36

    $default  reduce using rule 40 (variable)


State 27

   34 constant: TOK_INTCON .

    $default  reduce using rule 34 (constant)


State 28

   36 constant: TOK_CHARCON .

    $default  reduce using rule 36 (constant)


State 29

   35 constant: TOK_STRINGCON .

    $default  reduce using rule 35 (constant)


State 30

   24 vardecl: type TOK_IDENT '=' expr . ';'
   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '%' expr
   30     | expr . '=' expr
   41 variable: expr . ',' expr
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    '='        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '*'        shift, and go to state 41
    '/'        shift, and go to state 42
    '%'        shift, and go to state 43
    ';'        shift, and go to state 44
    ','        shift, and go to state 45


State 31

   33 expr: constant .

    $default  reduce using rule 33 (expr)


State 32

   32 expr: call .

    $default  reduce using rule 32 (expr)


State 33

   31 expr: variable .

    $default  reduce using rule 31 (expr)


State 34

   14 function: plaintype TOK_IDENT '(' ')' . block

    '}'  shift, and go to state 46
    ';'  shift, and go to state 47
    '{'  shift, and go to state 48

    block  go to state 49


State 35

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . '}' ';'

    '}'  shift, and go to state 50


State 36

   37 call: TOK_IDENT '(' . expr ')'

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 51
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 37

   42 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 52


State 38

   30 expr: expr '=' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 53
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 39

   25 expr: expr '+' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 54
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 40

   26 expr: expr '-' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 55
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 41

   27 expr: expr '*' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 56
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 42

   28 expr: expr '/' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 57
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 43

   29 expr: expr '%' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 58
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 44

   24 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 24 (vardecl)


State 45

   41 variable: expr ',' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 59
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 46

   17 block: '}' .

    $default  reduce using rule 17 (block)


State 47

   18 block: ';' .

    $default  reduce using rule 18 (block)


State 48

   15 block: '{' .

    $default  reduce using rule 15 (block)


State 49

   14 function: plaintype TOK_IDENT '(' ')' block .
   16 block: block . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_RETURN     shift, and go to state 60
    TOK_ARRAY      shift, and go to state 8
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29
    '}'            shift, and go to state 46
    ';'            shift, and go to state 47
    '{'            shift, and go to state 48

    TOK_VOID    [reduce using rule 14 (function)]
    TOK_INT     [reduce using rule 14 (function)]
    TOK_STRING  [reduce using rule 14 (function)]
    TOK_ARRAY   [reduce using rule 14 (function)]
    TOK_PTR     [reduce using rule 14 (function)]
    $default    reduce using rule 14 (function)

    type       go to state 11
    plaintype  go to state 25
    block      go to state 61
    statement  go to state 62
    vardecl    go to state 63
    expr       go to state 64
    constant   go to state 31
    call       go to state 32
    return     go to state 65
    variable   go to state 33


State 50

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' . ';'

    ';'  shift, and go to state 66


State 51

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '%' expr
   30     | expr . '=' expr
   37 call: TOK_IDENT '(' expr . ')'
   41 variable: expr . ',' expr
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    '='        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '*'        shift, and go to state 41
    '/'        shift, and go to state 42
    '%'        shift, and go to state 43
    ')'        shift, and go to state 67
    ','        shift, and go to state 45


State 52

   42 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 42 (variable)


State 53

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '%' expr
   30     | expr . '=' expr
   30     | expr '=' expr .
   41 variable: expr . ',' expr
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    '='        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '*'        shift, and go to state 41
    '/'        shift, and go to state 42
    '%'        shift, and go to state 43
    ','        shift, and go to state 45

    TOK_ARROW  [reduce using rule 30 (expr)]
    ','        [reduce using rule 30 (expr)]
    $default   reduce using rule 30 (expr)


State 54

   25 expr: expr . '+' expr
   25     | expr '+' expr .
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '%' expr
   30     | expr . '=' expr
   41 variable: expr . ',' expr
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    '*'        shift, and go to state 41
    '/'        shift, and go to state 42
    '%'        shift, and go to state 43
    ','        shift, and go to state 45

    TOK_ARROW  [reduce using rule 25 (expr)]
    ','        [reduce using rule 25 (expr)]
    $default   reduce using rule 25 (expr)


State 55

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   26     | expr '-' expr .
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '%' expr
   30     | expr . '=' expr
   41 variable: expr . ',' expr
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    '*'        shift, and go to state 41
    '/'        shift, and go to state 42
    '%'        shift, and go to state 43
    ','        shift, and go to state 45

    TOK_ARROW  [reduce using rule 26 (expr)]
    ','        [reduce using rule 26 (expr)]
    $default   reduce using rule 26 (expr)


State 56

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   27     | expr '*' expr .
   28     | expr . '/' expr
   29     | expr . '%' expr
   30     | expr . '=' expr
   41 variable: expr . ',' expr
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    ','        shift, and go to state 45

    TOK_ARROW  [reduce using rule 27 (expr)]
    ','        [reduce using rule 27 (expr)]
    $default   reduce using rule 27 (expr)


State 57

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   28     | expr '/' expr .
   29     | expr . '%' expr
   30     | expr . '=' expr
   41 variable: expr . ',' expr
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    ','        shift, and go to state 45

    TOK_ARROW  [reduce using rule 28 (expr)]
    ','        [reduce using rule 28 (expr)]
    $default   reduce using rule 28 (expr)


State 58

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '%' expr
   29     | expr '%' expr .
   30     | expr . '=' expr
   41 variable: expr . ',' expr
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    ','        shift, and go to state 45

    TOK_ARROW  [reduce using rule 29 (expr)]
    ','        [reduce using rule 29 (expr)]
    $default   reduce using rule 29 (expr)


State 59

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '%' expr
   30     | expr . '=' expr
   41 variable: expr . ',' expr
   41         | expr ',' expr .
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    '='        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '*'        shift, and go to state 41
    '/'        shift, and go to state 42
    '%'        shift, and go to state 43
    ','        shift, and go to state 45

    TOK_ARROW  [reduce using rule 41 (variable)]
    '='        [reduce using rule 41 (variable)]
    '+'        [reduce using rule 41 (variable)]
    '-'        [reduce using rule 41 (variable)]
    '*'        [reduce using rule 41 (variable)]
    '/'        [reduce using rule 41 (variable)]
    '%'        [reduce using rule 41 (variable)]
    ','        [reduce using rule 41 (variable)]
    $default   reduce using rule 41 (variable)


State 60

   38 return: TOK_RETURN . expr ';'
   39       | TOK_RETURN . ';'

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29
    ';'            shift, and go to state 68

    expr      go to state 69
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 61

   16 block: block . statement
   21 statement: block .

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_RETURN     shift, and go to state 60
    TOK_ARRAY      shift, and go to state 8
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29
    '}'            shift, and go to state 46
    ';'            shift, and go to state 47
    '{'            shift, and go to state 48

    TOK_VOID       [reduce using rule 21 (statement)]
    TOK_INT        [reduce using rule 21 (statement)]
    TOK_STRING     [reduce using rule 21 (statement)]
    TOK_RETURN     [reduce using rule 21 (statement)]
    TOK_ARRAY      [reduce using rule 21 (statement)]
    TOK_PTR        [reduce using rule 21 (statement)]
    TOK_IDENT      [reduce using rule 21 (statement)]
    TOK_INTCON     [reduce using rule 21 (statement)]
    TOK_CHARCON    [reduce using rule 21 (statement)]
    TOK_STRINGCON  [reduce using rule 21 (statement)]
    '}'            [reduce using rule 21 (statement)]
    ';'            [reduce using rule 21 (statement)]
    '{'            [reduce using rule 21 (statement)]
    $default       reduce using rule 21 (statement)

    type       go to state 11
    plaintype  go to state 25
    block      go to state 61
    statement  go to state 62
    vardecl    go to state 63
    expr       go to state 64
    constant   go to state 31
    call       go to state 32
    return     go to state 65
    variable   go to state 33


State 62

   16 block: block statement .

    $default  reduce using rule 16 (block)


State 63

   19 statement: vardecl .

    $default  reduce using rule 19 (statement)


State 64

   20 statement: expr . ';'
   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '%' expr
   30     | expr . '=' expr
   41 variable: expr . ',' expr
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    '='        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '*'        shift, and go to state 41
    '/'        shift, and go to state 42
    '%'        shift, and go to state 43
    ';'        shift, and go to state 70
    ','        shift, and go to state 45


State 65

   22 statement: return .

    $default  reduce using rule 22 (statement)


State 66

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';' .

    $default  reduce using rule 7 (structdef)


State 67

   37 call: TOK_IDENT '(' expr ')' .

    $default  reduce using rule 37 (call)


State 68

   39 return: TOK_RETURN ';' .

    $default  reduce using rule 39 (return)


State 69

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '%' expr
   30     | expr . '=' expr
   38 return: TOK_RETURN expr . ';'
   41 variable: expr . ',' expr
   42         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 37
    '='        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '*'        shift, and go to state 41
    '/'        shift, and go to state 42
    '%'        shift, and go to state 43
    ';'        shift, and go to state 71
    ','        shift, and go to state 45


State 70

   20 statement: expr ';' .

    $default  reduce using rule 20 (statement)


State 71

   38 return: TOK_RETURN expr ';' .

    $default  reduce using rule 38 (return)
