Nonterminals useless in grammar

   start


Terminals unused in grammar

   TOK_IF
   TOK_ELSE
   TOK_WHILE
   TOK_NULLPTR
   TOK_ALLOC
   TOK_EQ
   TOK_NE
   TOK_LT
   TOK_LE
   TOK_GT
   TOK_GE
   TOK_NOT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_FUNC
   TOK_TYPE_ID
   TOK_PARAM
   '^'


Rules useless in grammar

   46 start: program


State 12 conflicts: 1 shift/reduce
State 51 conflicts: 5 shift/reduce
State 58 conflicts: 2 shift/reduce
State 59 conflicts: 2 shift/reduce
State 60 conflicts: 2 shift/reduce
State 61 conflicts: 2 shift/reduce
State 62 conflicts: 2 shift/reduce
State 63 conflicts: 2 shift/reduce
State 64 conflicts: 8 shift/reduce
State 66 conflicts: 13 shift/reduce
State 71 conflicts: 5 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program vardecl
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';'

    8 type: plaintype
    9     | TOK_ARRAY

   10 plaintype: TOK_INT
   11          | TOK_STRING
   12          | TOK_PTR
   13          | TOK_VOID

   14 function: plaintype TOK_IDENT '(' ')' block
   15         | plaintype TOK_IDENT '(' parameters ')' block

   16 parameters: type TOK_IDENT
   17           | parameters ',' type TOK_IDENT

   18 block: '{'
   19      | block statement
   20      | '}'
   21      | ';'

   22 statement: vardecl
   23          | expr ';'
   24          | block
   25          | return

   26 vardecl: type TOK_IDENT ';'
   27        | type TOK_IDENT '=' expr ';'

   28 expr: expr '+' expr
   29     | expr '-' expr
   30     | expr '*' expr
   31     | expr '/' expr
   32     | expr '%' expr
   33     | expr '=' expr
   34     | variable
   35     | call
   36     | constant

   37 constant: TOK_INTCON
   38         | TOK_STRINGCON
   39         | TOK_CHARCON

   40 call: TOK_IDENT '(' expr ')'

   41 return: TOK_RETURN expr ';'
   42       | TOK_RETURN ';'

   43 variable: TOK_IDENT
   44         | expr ',' expr
   45         | expr TOK_ARROW TOK_IDENT


Terminals, with rules where they appear

$end (0) 0
'%' (37) 32
'(' (40) 14 15 40
')' (41) 14 15 40
'*' (42) 30
'+' (43) 28
',' (44) 17 44
'-' (45) 29
'/' (47) 31
';' (59) 5 7 21 23 26 27 41 42
'=' (61) 27 33
'^' (94)
'{' (123) 7 18
'}' (125) 4 7 20
error (256) 4 5
TOK_VOID (258) 13
TOK_INT (259) 10
TOK_STRING (260) 11
TOK_IF (261)
TOK_ELSE (262)
TOK_WHILE (263)
TOK_RETURN (264) 41 42
TOK_STRUCT (265) 7
TOK_NULLPTR (266)
TOK_ARRAY (267) 9
TOK_ARROW (268) 45
TOK_ALLOC (269)
TOK_PTR (270) 12
TOK_EQ (271)
TOK_NE (272)
TOK_LT (273)
TOK_LE (274)
TOK_GT (275)
TOK_GE (276)
TOK_NOT (277)
TOK_IDENT (278) 7 14 15 16 17 26 27 40 43 45
TOK_INTCON (279) 37
TOK_CHARCON (280) 39
TOK_STRINGCON (281) 38
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_FUNC (285)
TOK_TYPE_ID (286)
TOK_PARAM (287)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1 2 3 4 5 6, on right: 0 1 2 3 4 5
structdef (48)
    on left: 7, on right: 1
type (49)
    on left: 8 9, on right: 7 16 17 26 27
plaintype (50)
    on left: 10 11 12 13, on right: 8 14 15
function (51)
    on left: 14 15, on right: 2
parameters (52)
    on left: 16 17, on right: 15 17
block (53)
    on left: 18 19 20 21, on right: 14 15 19 24
statement (54)
    on left: 22 23 24 25, on right: 19
vardecl (55)
    on left: 26 27, on right: 3 22
expr (56)
    on left: 28 29 30 31 32 33 34 35 36, on right: 23 27 28 29 30 31
    32 33 40 41 44 45
constant (57)
    on left: 37 38 39, on right: 36
call (58)
    on left: 40, on right: 35
return (59)
    on left: 41 42, on right: 25
variable (60)
    on left: 43 44 45, on right: 34


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . vardecl
    4        | program . error '}'
    5        | program . error ';'

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    structdef  go to state 10
    type       go to state 11
    plaintype  go to state 12
    function   go to state 13
    vardecl    go to state 14


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 15
    ';'  shift, and go to state 16


State 4

   13 plaintype: TOK_VOID .

    $default  reduce using rule 13 (plaintype)


State 5

   10 plaintype: TOK_INT .

    $default  reduce using rule 10 (plaintype)


State 6

   11 plaintype: TOK_STRING .

    $default  reduce using rule 11 (plaintype)


State 7

    7 structdef: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 17


State 8

    9 type: TOK_ARRAY .

    $default  reduce using rule 9 (type)


State 9

   12 plaintype: TOK_PTR .

    $default  reduce using rule 12 (plaintype)


State 10

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 11

   26 vardecl: type . TOK_IDENT ';'
   27        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 18


State 12

    8 type: plaintype .
   14 function: plaintype . TOK_IDENT '(' ')' block
   15         | plaintype . TOK_IDENT '(' parameters ')' block

    TOK_IDENT  shift, and go to state 19

    TOK_IDENT  [reduce using rule 8 (type)]


State 13

    2 program: program function .

    $default  reduce using rule 2 (program)


State 14

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 15

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 16

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 17

    7 structdef: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT '}' ';'

    '{'  shift, and go to state 20


State 18

   26 vardecl: type TOK_IDENT . ';'
   27        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 21
    ';'  shift, and go to state 22


State 19

   14 function: plaintype TOK_IDENT . '(' ')' block
   15         | plaintype TOK_IDENT . '(' parameters ')' block

    '('  shift, and go to state 23


State 20

    7 structdef: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT '}' ';'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 24
    plaintype  go to state 25


State 21

   27 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 30
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 22

   26 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 26 (vardecl)


State 23

   14 function: plaintype TOK_IDENT '(' . ')' block
   15         | plaintype TOK_IDENT '(' . parameters ')' block

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    ')'         shift, and go to state 34

    type        go to state 35
    plaintype   go to state 25
    parameters  go to state 36


State 24

    7 structdef: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 37


State 25

    8 type: plaintype .

    $default  reduce using rule 8 (type)


State 26

   40 call: TOK_IDENT . '(' expr ')'
   43 variable: TOK_IDENT .

    '('  shift, and go to state 38

    $default  reduce using rule 43 (variable)


State 27

   37 constant: TOK_INTCON .

    $default  reduce using rule 37 (constant)


State 28

   39 constant: TOK_CHARCON .

    $default  reduce using rule 39 (constant)


State 29

   38 constant: TOK_STRINGCON .

    $default  reduce using rule 38 (constant)


State 30

   27 vardecl: type TOK_IDENT '=' expr . ';'
   28 expr: expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . '=' expr
   44 variable: expr . ',' expr
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    '='        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ';'        shift, and go to state 46
    ','        shift, and go to state 47


State 31

   36 expr: constant .

    $default  reduce using rule 36 (expr)


State 32

   35 expr: call .

    $default  reduce using rule 35 (expr)


State 33

   34 expr: variable .

    $default  reduce using rule 34 (expr)


State 34

   14 function: plaintype TOK_IDENT '(' ')' . block

    '}'  shift, and go to state 48
    ';'  shift, and go to state 49
    '{'  shift, and go to state 50

    block  go to state 51


State 35

   16 parameters: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 52


State 36

   15 function: plaintype TOK_IDENT '(' parameters . ')' block
   17 parameters: parameters . ',' type TOK_IDENT

    ')'  shift, and go to state 53
    ','  shift, and go to state 54


State 37

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . '}' ';'

    '}'  shift, and go to state 55


State 38

   40 call: TOK_IDENT '(' . expr ')'

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 56
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 39

   45 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 57


State 40

   33 expr: expr '=' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 58
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 41

   28 expr: expr '+' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 59
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 42

   29 expr: expr '-' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 60
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 43

   30 expr: expr '*' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 61
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 44

   31 expr: expr '/' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 62
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 45

   32 expr: expr '%' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 63
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 46

   27 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 27 (vardecl)


State 47

   44 variable: expr ',' . expr

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29

    expr      go to state 64
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 48

   20 block: '}' .

    $default  reduce using rule 20 (block)


State 49

   21 block: ';' .

    $default  reduce using rule 21 (block)


State 50

   18 block: '{' .

    $default  reduce using rule 18 (block)


State 51

   14 function: plaintype TOK_IDENT '(' ')' block .
   19 block: block . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_RETURN     shift, and go to state 65
    TOK_ARRAY      shift, and go to state 8
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29
    '}'            shift, and go to state 48
    ';'            shift, and go to state 49
    '{'            shift, and go to state 50

    TOK_VOID    [reduce using rule 14 (function)]
    TOK_INT     [reduce using rule 14 (function)]
    TOK_STRING  [reduce using rule 14 (function)]
    TOK_ARRAY   [reduce using rule 14 (function)]
    TOK_PTR     [reduce using rule 14 (function)]
    $default    reduce using rule 14 (function)

    type       go to state 11
    plaintype  go to state 25
    block      go to state 66
    statement  go to state 67
    vardecl    go to state 68
    expr       go to state 69
    constant   go to state 31
    call       go to state 32
    return     go to state 70
    variable   go to state 33


State 52

   16 parameters: type TOK_IDENT .

    $default  reduce using rule 16 (parameters)


State 53

   15 function: plaintype TOK_IDENT '(' parameters ')' . block

    '}'  shift, and go to state 48
    ';'  shift, and go to state 49
    '{'  shift, and go to state 50

    block  go to state 71


State 54

   17 parameters: parameters ',' . type TOK_IDENT

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 72
    plaintype  go to state 25


State 55

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' . ';'

    ';'  shift, and go to state 73


State 56

   28 expr: expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . '=' expr
   40 call: TOK_IDENT '(' expr . ')'
   44 variable: expr . ',' expr
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    '='        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ')'        shift, and go to state 74
    ','        shift, and go to state 47


State 57

   45 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 45 (variable)


State 58

   28 expr: expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . '=' expr
   33     | expr '=' expr .
   44 variable: expr . ',' expr
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    '='        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 33 (expr)]
    ','        [reduce using rule 33 (expr)]
    $default   reduce using rule 33 (expr)


State 59

   28 expr: expr . '+' expr
   28     | expr '+' expr .
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . '=' expr
   44 variable: expr . ',' expr
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 28 (expr)]
    ','        [reduce using rule 28 (expr)]
    $default   reduce using rule 28 (expr)


State 60

   28 expr: expr . '+' expr
   29     | expr . '-' expr
   29     | expr '-' expr .
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . '=' expr
   44 variable: expr . ',' expr
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 29 (expr)]
    ','        [reduce using rule 29 (expr)]
    $default   reduce using rule 29 (expr)


State 61

   28 expr: expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   30     | expr '*' expr .
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . '=' expr
   44 variable: expr . ',' expr
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 30 (expr)]
    ','        [reduce using rule 30 (expr)]
    $default   reduce using rule 30 (expr)


State 62

   28 expr: expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   31     | expr '/' expr .
   32     | expr . '%' expr
   33     | expr . '=' expr
   44 variable: expr . ',' expr
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 31 (expr)]
    ','        [reduce using rule 31 (expr)]
    $default   reduce using rule 31 (expr)


State 63

   28 expr: expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   32     | expr '%' expr .
   33     | expr . '=' expr
   44 variable: expr . ',' expr
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 32 (expr)]
    ','        [reduce using rule 32 (expr)]
    $default   reduce using rule 32 (expr)


State 64

   28 expr: expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . '=' expr
   44 variable: expr . ',' expr
   44         | expr ',' expr .
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    '='        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 44 (variable)]
    '='        [reduce using rule 44 (variable)]
    '+'        [reduce using rule 44 (variable)]
    '-'        [reduce using rule 44 (variable)]
    '*'        [reduce using rule 44 (variable)]
    '/'        [reduce using rule 44 (variable)]
    '%'        [reduce using rule 44 (variable)]
    ','        [reduce using rule 44 (variable)]
    $default   reduce using rule 44 (variable)


State 65

   41 return: TOK_RETURN . expr ';'
   42       | TOK_RETURN . ';'

    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29
    ';'            shift, and go to state 75

    expr      go to state 76
    constant  go to state 31
    call      go to state 32
    variable  go to state 33


State 66

   19 block: block . statement
   24 statement: block .

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_RETURN     shift, and go to state 65
    TOK_ARRAY      shift, and go to state 8
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29
    '}'            shift, and go to state 48
    ';'            shift, and go to state 49
    '{'            shift, and go to state 50

    TOK_VOID       [reduce using rule 24 (statement)]
    TOK_INT        [reduce using rule 24 (statement)]
    TOK_STRING     [reduce using rule 24 (statement)]
    TOK_RETURN     [reduce using rule 24 (statement)]
    TOK_ARRAY      [reduce using rule 24 (statement)]
    TOK_PTR        [reduce using rule 24 (statement)]
    TOK_IDENT      [reduce using rule 24 (statement)]
    TOK_INTCON     [reduce using rule 24 (statement)]
    TOK_CHARCON    [reduce using rule 24 (statement)]
    TOK_STRINGCON  [reduce using rule 24 (statement)]
    '}'            [reduce using rule 24 (statement)]
    ';'            [reduce using rule 24 (statement)]
    '{'            [reduce using rule 24 (statement)]
    $default       reduce using rule 24 (statement)

    type       go to state 11
    plaintype  go to state 25
    block      go to state 66
    statement  go to state 67
    vardecl    go to state 68
    expr       go to state 69
    constant   go to state 31
    call       go to state 32
    return     go to state 70
    variable   go to state 33


State 67

   19 block: block statement .

    $default  reduce using rule 19 (block)


State 68

   22 statement: vardecl .

    $default  reduce using rule 22 (statement)


State 69

   23 statement: expr . ';'
   28 expr: expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . '=' expr
   44 variable: expr . ',' expr
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    '='        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ';'        shift, and go to state 77
    ','        shift, and go to state 47


State 70

   25 statement: return .

    $default  reduce using rule 25 (statement)


State 71

   15 function: plaintype TOK_IDENT '(' parameters ')' block .
   19 block: block . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_RETURN     shift, and go to state 65
    TOK_ARRAY      shift, and go to state 8
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 26
    TOK_INTCON     shift, and go to state 27
    TOK_CHARCON    shift, and go to state 28
    TOK_STRINGCON  shift, and go to state 29
    '}'            shift, and go to state 48
    ';'            shift, and go to state 49
    '{'            shift, and go to state 50

    TOK_VOID    [reduce using rule 15 (function)]
    TOK_INT     [reduce using rule 15 (function)]
    TOK_STRING  [reduce using rule 15 (function)]
    TOK_ARRAY   [reduce using rule 15 (function)]
    TOK_PTR     [reduce using rule 15 (function)]
    $default    reduce using rule 15 (function)

    type       go to state 11
    plaintype  go to state 25
    block      go to state 66
    statement  go to state 67
    vardecl    go to state 68
    expr       go to state 69
    constant   go to state 31
    call       go to state 32
    return     go to state 70
    variable   go to state 33


State 72

   17 parameters: parameters ',' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 78


State 73

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';' .

    $default  reduce using rule 7 (structdef)


State 74

   40 call: TOK_IDENT '(' expr ')' .

    $default  reduce using rule 40 (call)


State 75

   42 return: TOK_RETURN ';' .

    $default  reduce using rule 42 (return)


State 76

   28 expr: expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . '=' expr
   41 return: TOK_RETURN expr . ';'
   44 variable: expr . ',' expr
   45         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 39
    '='        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ';'        shift, and go to state 79
    ','        shift, and go to state 47


State 77

   23 statement: expr ';' .

    $default  reduce using rule 23 (statement)


State 78

   17 parameters: parameters ',' type TOK_IDENT .

    $default  reduce using rule 17 (parameters)


State 79

   41 return: TOK_RETURN expr ';' .

    $default  reduce using rule 41 (return)
