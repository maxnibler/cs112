Terminals unused in grammar

    TOK_NOT
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    TOK_FUNC
    TOK_TYPE_ID
    TOK_PARAM


State 10 conflicts: 5 shift/reduce
State 12 conflicts: 1 shift/reduce
State 27 conflicts: 5 shift/reduce
State 28 conflicts: 7 shift/reduce
State 44 conflicts: 1 shift/reduce
State 51 conflicts: 18 shift/reduce
State 55 conflicts: 1 shift/reduce
State 59 conflicts: 8 shift/reduce
State 93 conflicts: 14 shift/reduce
State 106 conflicts: 14 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program vardecl
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: TOK_STRUCT TOK_IDENT '{'
    8          | structdef type TOK_IDENT ';'
    9          | structdef '}' ';'

   10 type: plaintype
   11     | TOK_ARRAY '<' plaintype '>'

   12 plaintype: TOK_INT
   13          | TOK_STRING
   14          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   15          | TOK_VOID

   16 function: plaintype TOK_IDENT
   17         | function parameters
   18         | function block

   19 parameters: '('
   20           | parameters type TOK_IDENT
   21           | parameters ',' type TOK_IDENT
   22           | parameters ')'

   23 block: '{'
   24      | block statement
   25      | block '}'

   26 statement: vardecl
   27          | expr ';'
   28          | block
   29          | while
   30          | ifelse
   31          | return
   32          | ';'

   33 vardecl: type TOK_IDENT ';'
   34        | type TOK_IDENT '=' expr ';'

   35 while: TOK_WHILE '(' expr ')' statement

   36 ifelse: TOK_IF '(' expr ')' statement
   37       | ifelse TOK_ELSE statement

   38 return: TOK_RETURN expr ';'
   39       | TOK_RETURN ';'

   40 expr: expr binop expr
   41     | variable
   42     | call
   43     | constant
   44     | allocator
   45     | '(' expr ')'

   46 binop: '+'
   47      | '-'
   48      | '*'
   49      | '/'
   50      | '%'
   51      | '='
   52      | '^'
   53      | TOK_GT
   54      | TOK_GE
   55      | TOK_LT
   56      | TOK_LE
   57      | TOK_NE
   58      | TOK_EQ

   59 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   60          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   61          | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

   62 call: TOK_IDENT '('
   63     | call expr
   64     | call ')'

   65 variable: TOK_IDENT
   66         | expr TOK_ARROW TOK_IDENT

   67 constant: TOK_INTCON
   68         | TOK_STRINGCON
   69         | TOK_CHARCON
   70         | TOK_NULLPTR


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 50
    '(' (40) 19 35 36 45 59 60 61 62
    ')' (41) 22 35 36 45 59 60 61 64
    '*' (42) 48
    '+' (43) 46
    ',' (44) 21
    '-' (45) 47
    '/' (47) 49
    ';' (59) 5 8 9 27 32 33 34 38 39
    '<' (60) 11
    '=' (61) 34 51
    '>' (62) 11
    '^' (94) 52
    '{' (123) 7 23
    '}' (125) 4 9 25
    error (256) 4 5
    TOK_VOID (258) 15
    TOK_INT (259) 12
    TOK_STRING (260) 13 59
    TOK_IF (261) 36
    TOK_ELSE (262) 37
    TOK_WHILE (263) 35
    TOK_RETURN (264) 38 39
    TOK_STRUCT (265) 7 14 60
    TOK_NULLPTR (266) 70
    TOK_ARRAY (267) 11 61
    TOK_ARROW (268) 66
    TOK_ALLOC (269) 59 60 61
    TOK_PTR (270) 14
    TOK_EQ (271) 58
    TOK_NE (272) 57
    TOK_LT (273) 14 55 59 60 61
    TOK_LE (274) 56
    TOK_GT (275) 14 53 59 60 61
    TOK_GE (276) 54
    TOK_NOT (277)
    TOK_IDENT (278) 7 8 14 16 20 21 33 34 60 62 65 66
    TOK_INTCON (279) 67
    TOK_CHARCON (280) 69
    TOK_STRINGCON (281) 68
    TOK_ROOT (282)
    TOK_BLOCK (283)
    TOK_CALL (284)
    TOK_FUNC (285)
    TOK_TYPE_ID (286)
    TOK_PARAM (287)


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    program (49)
        on left: 1 2 3 4 5 6
        on right: 0 1 2 3 4 5
    structdef (50)
        on left: 7 8 9
        on right: 1 8 9
    type (51)
        on left: 10 11
        on right: 8 20 21 33 34
    plaintype (52)
        on left: 12 13 14 15
        on right: 10 11 16 61
    function (53)
        on left: 16 17 18
        on right: 2 17 18
    parameters (54)
        on left: 19 20 21 22
        on right: 17 20 21 22
    block (55)
        on left: 23 24 25
        on right: 18 24 25 28
    statement (56)
        on left: 26 27 28 29 30 31 32
        on right: 24 35 36 37
    vardecl (57)
        on left: 33 34
        on right: 3 26
    while (58)
        on left: 35
        on right: 29
    ifelse (59)
        on left: 36 37
        on right: 30 37
    return (60)
        on left: 38 39
        on right: 31
    expr (61)
        on left: 40 41 42 43 44 45
        on right: 27 34 35 36 38 40 45 59 61 63 66
    binop (62)
        on left: 46 47 48 49 50 51 52 53 54 55 56 57 58
        on right: 40
    allocator (63)
        on left: 59 60 61
        on right: 44
    call (64)
        on left: 62 63 64
        on right: 42 63 64
    variable (65)
        on left: 65 66
        on right: 41
    constant (66)
        on left: 67 68 69 70
        on right: 43


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . vardecl
    4        | program . error '}'
    5        | program . error ';'

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    structdef  go to state 10
    type       go to state 11
    plaintype  go to state 12
    function   go to state 13
    vardecl    go to state 14


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 15
    ';'  shift, and go to state 16


State 4

   15 plaintype: TOK_VOID .

    $default  reduce using rule 15 (plaintype)


State 5

   12 plaintype: TOK_INT .

    $default  reduce using rule 12 (plaintype)


State 6

   13 plaintype: TOK_STRING .

    $default  reduce using rule 13 (plaintype)


State 7

    7 structdef: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 17


State 8

   11 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 18


State 9

   14 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 19


State 10

    1 program: program structdef .
    8 structdef: structdef . type TOK_IDENT ';'
    9          | structdef . '}' ';'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    '}'         shift, and go to state 20

    TOK_VOID    [reduce using rule 1 (program)]
    TOK_INT     [reduce using rule 1 (program)]
    TOK_STRING  [reduce using rule 1 (program)]
    TOK_ARRAY   [reduce using rule 1 (program)]
    TOK_PTR     [reduce using rule 1 (program)]
    $default    reduce using rule 1 (program)

    type       go to state 21
    plaintype  go to state 22


State 11

   33 vardecl: type . TOK_IDENT ';'
   34        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 23


State 12

   10 type: plaintype .
   16 function: plaintype . TOK_IDENT

    TOK_IDENT  shift, and go to state 24

    TOK_IDENT  [reduce using rule 10 (type)]


State 13

    2 program: program function .
   17 function: function . parameters
   18         | function . block

    '{'  shift, and go to state 25
    '('  shift, and go to state 26

    $default  reduce using rule 2 (program)

    parameters  go to state 27
    block       go to state 28


State 14

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 15

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 16

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 17

    7 structdef: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 29


State 18

   11 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_PTR     shift, and go to state 9

    plaintype  go to state 30


State 19

   14 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 31


State 20

    9 structdef: structdef '}' . ';'

    ';'  shift, and go to state 32


State 21

    8 structdef: structdef type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 33


State 22

   10 type: plaintype .

    $default  reduce using rule 10 (type)


State 23

   33 vardecl: type TOK_IDENT . ';'
   34        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 34
    ';'  shift, and go to state 35


State 24

   16 function: plaintype TOK_IDENT .

    $default  reduce using rule 16 (function)


State 25

   23 block: '{' .

    $default  reduce using rule 23 (block)


State 26

   19 parameters: '(' .

    $default  reduce using rule 19 (parameters)


State 27

   17 function: function parameters .
   20 parameters: parameters . type TOK_IDENT
   21           | parameters . ',' type TOK_IDENT
   22           | parameters . ')'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    ','         shift, and go to state 36
    ')'         shift, and go to state 37

    TOK_VOID    [reduce using rule 17 (function)]
    TOK_INT     [reduce using rule 17 (function)]
    TOK_STRING  [reduce using rule 17 (function)]
    TOK_ARRAY   [reduce using rule 17 (function)]
    TOK_PTR     [reduce using rule 17 (function)]
    $default    reduce using rule 17 (function)

    type       go to state 38
    plaintype  go to state 22


State 28

   18 function: function block .
   24 block: block . statement
   25      | block . '}'

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 39
    TOK_WHILE      shift, and go to state 40
    TOK_RETURN     shift, and go to state 41
    TOK_NULLPTR    shift, and go to state 42
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    '}'            shift, and go to state 48
    ';'            shift, and go to state 49
    '{'            shift, and go to state 25
    '('            shift, and go to state 50

    TOK_VOID    [reduce using rule 18 (function)]
    TOK_INT     [reduce using rule 18 (function)]
    TOK_STRING  [reduce using rule 18 (function)]
    TOK_ARRAY   [reduce using rule 18 (function)]
    TOK_PTR     [reduce using rule 18 (function)]
    '{'         [reduce using rule 18 (function)]
    '('         [reduce using rule 18 (function)]
    $default    reduce using rule 18 (function)

    type       go to state 11
    plaintype  go to state 22
    block      go to state 51
    statement  go to state 52
    vardecl    go to state 53
    while      go to state 54
    ifelse     go to state 55
    return     go to state 56
    expr       go to state 57
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 29

    7 structdef: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 7 (structdef)


State 30

   11 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 62


State 31

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 63


State 32

    9 structdef: structdef '}' ';' .

    $default  reduce using rule 9 (structdef)


State 33

    8 structdef: structdef type TOK_IDENT . ';'

    ';'  shift, and go to state 64


State 34

   34 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    '('            shift, and go to state 50

    expr       go to state 65
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 35

   33 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 33 (vardecl)


State 36

   21 parameters: parameters ',' . type TOK_IDENT

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 66
    plaintype  go to state 22


State 37

   22 parameters: parameters ')' .

    $default  reduce using rule 22 (parameters)


State 38

   20 parameters: parameters type . TOK_IDENT

    TOK_IDENT  shift, and go to state 67


State 39

   36 ifelse: TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 68


State 40

   35 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 69


State 41

   38 return: TOK_RETURN . expr ';'
   39       | TOK_RETURN . ';'

    TOK_NULLPTR    shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    ';'            shift, and go to state 70
    '('            shift, and go to state 50

    expr       go to state 71
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 42

   70 constant: TOK_NULLPTR .

    $default  reduce using rule 70 (constant)


State 43

   59 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   60          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   61          | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 72


State 44

   62 call: TOK_IDENT . '('
   65 variable: TOK_IDENT .

    '('  shift, and go to state 73

    '('       [reduce using rule 65 (variable)]
    $default  reduce using rule 65 (variable)


State 45

   67 constant: TOK_INTCON .

    $default  reduce using rule 67 (constant)


State 46

   69 constant: TOK_CHARCON .

    $default  reduce using rule 69 (constant)


State 47

   68 constant: TOK_STRINGCON .

    $default  reduce using rule 68 (constant)


State 48

   25 block: block '}' .

    $default  reduce using rule 25 (block)


State 49

   32 statement: ';' .

    $default  reduce using rule 32 (statement)


State 50

   45 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    '('            shift, and go to state 50

    expr       go to state 74
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 51

   24 block: block . statement
   25      | block . '}'
   28 statement: block .

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 39
    TOK_WHILE      shift, and go to state 40
    TOK_RETURN     shift, and go to state 41
    TOK_NULLPTR    shift, and go to state 42
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    '}'            shift, and go to state 48
    ';'            shift, and go to state 49
    '{'            shift, and go to state 25
    '('            shift, and go to state 50

    TOK_VOID       [reduce using rule 28 (statement)]
    TOK_INT        [reduce using rule 28 (statement)]
    TOK_STRING     [reduce using rule 28 (statement)]
    TOK_IF         [reduce using rule 28 (statement)]
    TOK_WHILE      [reduce using rule 28 (statement)]
    TOK_RETURN     [reduce using rule 28 (statement)]
    TOK_NULLPTR    [reduce using rule 28 (statement)]
    TOK_ARRAY      [reduce using rule 28 (statement)]
    TOK_ALLOC      [reduce using rule 28 (statement)]
    TOK_PTR        [reduce using rule 28 (statement)]
    TOK_IDENT      [reduce using rule 28 (statement)]
    TOK_INTCON     [reduce using rule 28 (statement)]
    TOK_CHARCON    [reduce using rule 28 (statement)]
    TOK_STRINGCON  [reduce using rule 28 (statement)]
    '}'            [reduce using rule 28 (statement)]
    ';'            [reduce using rule 28 (statement)]
    '{'            [reduce using rule 28 (statement)]
    '('            [reduce using rule 28 (statement)]
    $default       reduce using rule 28 (statement)

    type       go to state 11
    plaintype  go to state 22
    block      go to state 51
    statement  go to state 52
    vardecl    go to state 53
    while      go to state 54
    ifelse     go to state 55
    return     go to state 56
    expr       go to state 57
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 52

   24 block: block statement .

    $default  reduce using rule 24 (block)


State 53

   26 statement: vardecl .

    $default  reduce using rule 26 (statement)


State 54

   29 statement: while .

    $default  reduce using rule 29 (statement)


State 55

   30 statement: ifelse .
   37 ifelse: ifelse . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 75

    TOK_ELSE  [reduce using rule 30 (statement)]
    $default  reduce using rule 30 (statement)


State 56

   31 statement: return .

    $default  reduce using rule 31 (statement)


State 57

   27 statement: expr . ';'
   40 expr: expr . binop expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    TOK_EQ     shift, and go to state 77
    TOK_NE     shift, and go to state 78
    TOK_LT     shift, and go to state 79
    TOK_LE     shift, and go to state 80
    TOK_GT     shift, and go to state 81
    TOK_GE     shift, and go to state 82
    '='        shift, and go to state 83
    '+'        shift, and go to state 84
    '-'        shift, and go to state 85
    '*'        shift, and go to state 86
    '/'        shift, and go to state 87
    '%'        shift, and go to state 88
    '^'        shift, and go to state 89
    ';'        shift, and go to state 90

    binop  go to state 91


State 58

   44 expr: allocator .

    $default  reduce using rule 44 (expr)


State 59

   42 expr: call .
   63 call: call . expr
   64     | call . ')'

    TOK_NULLPTR    shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    '('            shift, and go to state 50
    ')'            shift, and go to state 92

    TOK_NULLPTR    [reduce using rule 42 (expr)]
    TOK_ALLOC      [reduce using rule 42 (expr)]
    TOK_IDENT      [reduce using rule 42 (expr)]
    TOK_INTCON     [reduce using rule 42 (expr)]
    TOK_CHARCON    [reduce using rule 42 (expr)]
    TOK_STRINGCON  [reduce using rule 42 (expr)]
    '('            [reduce using rule 42 (expr)]
    ')'            [reduce using rule 42 (expr)]
    $default       reduce using rule 42 (expr)

    expr       go to state 93
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 60

   41 expr: variable .

    $default  reduce using rule 41 (expr)


State 61

   43 expr: constant .

    $default  reduce using rule 43 (expr)


State 62

   11 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 11 (type)


State 63

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 94


State 64

    8 structdef: structdef type TOK_IDENT ';' .

    $default  reduce using rule 8 (structdef)


State 65

   34 vardecl: type TOK_IDENT '=' expr . ';'
   40 expr: expr . binop expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    TOK_EQ     shift, and go to state 77
    TOK_NE     shift, and go to state 78
    TOK_LT     shift, and go to state 79
    TOK_LE     shift, and go to state 80
    TOK_GT     shift, and go to state 81
    TOK_GE     shift, and go to state 82
    '='        shift, and go to state 83
    '+'        shift, and go to state 84
    '-'        shift, and go to state 85
    '*'        shift, and go to state 86
    '/'        shift, and go to state 87
    '%'        shift, and go to state 88
    '^'        shift, and go to state 89
    ';'        shift, and go to state 95

    binop  go to state 91


State 66

   21 parameters: parameters ',' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 96


State 67

   20 parameters: parameters type TOK_IDENT .

    $default  reduce using rule 20 (parameters)


State 68

   36 ifelse: TOK_IF '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    '('            shift, and go to state 50

    expr       go to state 97
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 69

   35 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    '('            shift, and go to state 50

    expr       go to state 98
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 70

   39 return: TOK_RETURN ';' .

    $default  reduce using rule 39 (return)


State 71

   38 return: TOK_RETURN expr . ';'
   40 expr: expr . binop expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    TOK_EQ     shift, and go to state 77
    TOK_NE     shift, and go to state 78
    TOK_LT     shift, and go to state 79
    TOK_LE     shift, and go to state 80
    TOK_GT     shift, and go to state 81
    TOK_GE     shift, and go to state 82
    '='        shift, and go to state 83
    '+'        shift, and go to state 84
    '-'        shift, and go to state 85
    '*'        shift, and go to state 86
    '/'        shift, and go to state 87
    '%'        shift, and go to state 88
    '^'        shift, and go to state 89
    ';'        shift, and go to state 99

    binop  go to state 91


State 72

   59 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   60          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   61          | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_STRING  shift, and go to state 100
    TOK_STRUCT  shift, and go to state 101
    TOK_ARRAY   shift, and go to state 102


State 73

   62 call: TOK_IDENT '(' .

    $default  reduce using rule 62 (call)


State 74

   40 expr: expr . binop expr
   45     | '(' expr . ')'
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    TOK_EQ     shift, and go to state 77
    TOK_NE     shift, and go to state 78
    TOK_LT     shift, and go to state 79
    TOK_LE     shift, and go to state 80
    TOK_GT     shift, and go to state 81
    TOK_GE     shift, and go to state 82
    '='        shift, and go to state 83
    '+'        shift, and go to state 84
    '-'        shift, and go to state 85
    '*'        shift, and go to state 86
    '/'        shift, and go to state 87
    '%'        shift, and go to state 88
    '^'        shift, and go to state 89
    ')'        shift, and go to state 103

    binop  go to state 91


State 75

   37 ifelse: ifelse TOK_ELSE . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 39
    TOK_WHILE      shift, and go to state 40
    TOK_RETURN     shift, and go to state 41
    TOK_NULLPTR    shift, and go to state 42
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    ';'            shift, and go to state 49
    '{'            shift, and go to state 25
    '('            shift, and go to state 50

    type       go to state 11
    plaintype  go to state 22
    block      go to state 51
    statement  go to state 104
    vardecl    go to state 53
    while      go to state 54
    ifelse     go to state 55
    return     go to state 56
    expr       go to state 57
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 76

   66 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 105


State 77

   58 binop: TOK_EQ .

    $default  reduce using rule 58 (binop)


State 78

   57 binop: TOK_NE .

    $default  reduce using rule 57 (binop)


State 79

   55 binop: TOK_LT .

    $default  reduce using rule 55 (binop)


State 80

   56 binop: TOK_LE .

    $default  reduce using rule 56 (binop)


State 81

   53 binop: TOK_GT .

    $default  reduce using rule 53 (binop)


State 82

   54 binop: TOK_GE .

    $default  reduce using rule 54 (binop)


State 83

   51 binop: '=' .

    $default  reduce using rule 51 (binop)


State 84

   46 binop: '+' .

    $default  reduce using rule 46 (binop)


State 85

   47 binop: '-' .

    $default  reduce using rule 47 (binop)


State 86

   48 binop: '*' .

    $default  reduce using rule 48 (binop)


State 87

   49 binop: '/' .

    $default  reduce using rule 49 (binop)


State 88

   50 binop: '%' .

    $default  reduce using rule 50 (binop)


State 89

   52 binop: '^' .

    $default  reduce using rule 52 (binop)


State 90

   27 statement: expr ';' .

    $default  reduce using rule 27 (statement)


State 91

   40 expr: expr binop . expr

    TOK_NULLPTR    shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    '('            shift, and go to state 50

    expr       go to state 106
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 92

   64 call: call ')' .

    $default  reduce using rule 64 (call)


State 93

   40 expr: expr . binop expr
   63 call: call expr .
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    TOK_EQ     shift, and go to state 77
    TOK_NE     shift, and go to state 78
    TOK_LT     shift, and go to state 79
    TOK_LE     shift, and go to state 80
    TOK_GT     shift, and go to state 81
    TOK_GE     shift, and go to state 82
    '='        shift, and go to state 83
    '+'        shift, and go to state 84
    '-'        shift, and go to state 85
    '*'        shift, and go to state 86
    '/'        shift, and go to state 87
    '%'        shift, and go to state 88
    '^'        shift, and go to state 89

    TOK_ARROW  [reduce using rule 63 (call)]
    TOK_EQ     [reduce using rule 63 (call)]
    TOK_NE     [reduce using rule 63 (call)]
    TOK_LT     [reduce using rule 63 (call)]
    TOK_LE     [reduce using rule 63 (call)]
    TOK_GT     [reduce using rule 63 (call)]
    TOK_GE     [reduce using rule 63 (call)]
    '='        [reduce using rule 63 (call)]
    '+'        [reduce using rule 63 (call)]
    '-'        [reduce using rule 63 (call)]
    '*'        [reduce using rule 63 (call)]
    '/'        [reduce using rule 63 (call)]
    '%'        [reduce using rule 63 (call)]
    '^'        [reduce using rule 63 (call)]
    $default   reduce using rule 63 (call)

    binop  go to state 91


State 94

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 14 (plaintype)


State 95

   34 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 34 (vardecl)


State 96

   21 parameters: parameters ',' type TOK_IDENT .

    $default  reduce using rule 21 (parameters)


State 97

   36 ifelse: TOK_IF '(' expr . ')' statement
   40 expr: expr . binop expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    TOK_EQ     shift, and go to state 77
    TOK_NE     shift, and go to state 78
    TOK_LT     shift, and go to state 79
    TOK_LE     shift, and go to state 80
    TOK_GT     shift, and go to state 81
    TOK_GE     shift, and go to state 82
    '='        shift, and go to state 83
    '+'        shift, and go to state 84
    '-'        shift, and go to state 85
    '*'        shift, and go to state 86
    '/'        shift, and go to state 87
    '%'        shift, and go to state 88
    '^'        shift, and go to state 89
    ')'        shift, and go to state 107

    binop  go to state 91


State 98

   35 while: TOK_WHILE '(' expr . ')' statement
   40 expr: expr . binop expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    TOK_EQ     shift, and go to state 77
    TOK_NE     shift, and go to state 78
    TOK_LT     shift, and go to state 79
    TOK_LE     shift, and go to state 80
    TOK_GT     shift, and go to state 81
    TOK_GE     shift, and go to state 82
    '='        shift, and go to state 83
    '+'        shift, and go to state 84
    '-'        shift, and go to state 85
    '*'        shift, and go to state 86
    '/'        shift, and go to state 87
    '%'        shift, and go to state 88
    '^'        shift, and go to state 89
    ')'        shift, and go to state 108

    binop  go to state 91


State 99

   38 return: TOK_RETURN expr ';' .

    $default  reduce using rule 38 (return)


State 100

   59 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 109


State 101

   60 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 110


State 102

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 111


State 103

   45 expr: '(' expr ')' .

    $default  reduce using rule 45 (expr)


State 104

   37 ifelse: ifelse TOK_ELSE statement .

    $default  reduce using rule 37 (ifelse)


State 105

   66 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 66 (variable)


State 106

   40 expr: expr . binop expr
   40     | expr binop expr .
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    TOK_EQ     shift, and go to state 77
    TOK_NE     shift, and go to state 78
    TOK_LT     shift, and go to state 79
    TOK_LE     shift, and go to state 80
    TOK_GT     shift, and go to state 81
    TOK_GE     shift, and go to state 82
    '='        shift, and go to state 83
    '+'        shift, and go to state 84
    '-'        shift, and go to state 85
    '*'        shift, and go to state 86
    '/'        shift, and go to state 87
    '%'        shift, and go to state 88
    '^'        shift, and go to state 89

    TOK_ARROW  [reduce using rule 40 (expr)]
    TOK_EQ     [reduce using rule 40 (expr)]
    TOK_NE     [reduce using rule 40 (expr)]
    TOK_LT     [reduce using rule 40 (expr)]
    TOK_LE     [reduce using rule 40 (expr)]
    TOK_GT     [reduce using rule 40 (expr)]
    TOK_GE     [reduce using rule 40 (expr)]
    '='        [reduce using rule 40 (expr)]
    '+'        [reduce using rule 40 (expr)]
    '-'        [reduce using rule 40 (expr)]
    '*'        [reduce using rule 40 (expr)]
    '/'        [reduce using rule 40 (expr)]
    '%'        [reduce using rule 40 (expr)]
    '^'        [reduce using rule 40 (expr)]
    $default   reduce using rule 40 (expr)

    binop  go to state 91


State 107

   36 ifelse: TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 39
    TOK_WHILE      shift, and go to state 40
    TOK_RETURN     shift, and go to state 41
    TOK_NULLPTR    shift, and go to state 42
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    ';'            shift, and go to state 49
    '{'            shift, and go to state 25
    '('            shift, and go to state 50

    type       go to state 11
    plaintype  go to state 22
    block      go to state 51
    statement  go to state 112
    vardecl    go to state 53
    while      go to state 54
    ifelse     go to state 55
    return     go to state 56
    expr       go to state 57
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 108

   35 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 39
    TOK_WHILE      shift, and go to state 40
    TOK_RETURN     shift, and go to state 41
    TOK_NULLPTR    shift, and go to state 42
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    ';'            shift, and go to state 49
    '{'            shift, and go to state 25
    '('            shift, and go to state 50

    type       go to state 11
    plaintype  go to state 22
    block      go to state 51
    statement  go to state 113
    vardecl    go to state 53
    while      go to state 54
    ifelse     go to state 55
    return     go to state 56
    expr       go to state 57
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 109

   59 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 114


State 110

   60 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 115


State 111

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_PTR     shift, and go to state 9

    plaintype  go to state 116


State 112

   36 ifelse: TOK_IF '(' expr ')' statement .

    $default  reduce using rule 36 (ifelse)


State 113

   35 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 35 (while)


State 114

   59 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    '('            shift, and go to state 50

    expr       go to state 117
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 115

   60 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 118


State 116

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype . TOK_GT TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 119


State 117

   40 expr: expr . binop expr
   59 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    TOK_EQ     shift, and go to state 77
    TOK_NE     shift, and go to state 78
    TOK_LT     shift, and go to state 79
    TOK_LE     shift, and go to state 80
    TOK_GT     shift, and go to state 81
    TOK_GE     shift, and go to state 82
    '='        shift, and go to state 83
    '+'        shift, and go to state 84
    '-'        shift, and go to state 85
    '*'        shift, and go to state 86
    '/'        shift, and go to state 87
    '%'        shift, and go to state 88
    '^'        shift, and go to state 89
    ')'        shift, and go to state 120

    binop  go to state 91


State 118

   60 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 121


State 119

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 122


State 120

   59 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 59 (allocator)


State 121

   60 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 60 (allocator)


State 122

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT . '(' expr ')'

    '('  shift, and go to state 123


State 123

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 45
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    '('            shift, and go to state 50

    expr       go to state 124
    allocator  go to state 58
    call       go to state 59
    variable   go to state 60
    constant   go to state 61


State 124

   40 expr: expr . binop expr
   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr . ')'
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 76
    TOK_EQ     shift, and go to state 77
    TOK_NE     shift, and go to state 78
    TOK_LT     shift, and go to state 79
    TOK_LE     shift, and go to state 80
    TOK_GT     shift, and go to state 81
    TOK_GE     shift, and go to state 82
    '='        shift, and go to state 83
    '+'        shift, and go to state 84
    '-'        shift, and go to state 85
    '*'        shift, and go to state 86
    '/'        shift, and go to state 87
    '%'        shift, and go to state 88
    '^'        shift, and go to state 89
    ')'        shift, and go to state 125

    binop  go to state 91


State 125

   61 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')' .

    $default  reduce using rule 61 (allocator)
