Nonterminals useless in grammar

    start


Terminals unused in grammar

    TOK_BLOCK
    TOK_CALL


Rules useless in grammar

   46 start: program


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program error '}'
    3        | program error ';'
    4        | program token
    5        | %empty

    6 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';'

    7 type: plaintype
    8     | TOK_ARRAY '[' plaintype ']'

    9 plaintype: TOK_INT
   10          | TOK_STRING
   11          | TOK_PTR

   12 token: '('
   13      | ')'
   14      | '['
   15      | ']'
   16      | ','
   17      | '='
   18      | '+'
   19      | '-'
   20      | '*'
   21      | '/'
   22      | '%'
   23      | TOK_NOT
   24      | TOK_PTR
   25      | TOK_ROOT TOK_VOID
   26      | TOK_INT
   27      | TOK_STRING
   28      | TOK_IF
   29      | TOK_ELSE
   30      | TOK_WHILE
   31      | TOK_RETURN
   32      | TOK_NULLPTR
   33      | TOK_ARRAY
   34      | TOK_ARROW
   35      | TOK_ALLOC
   36      | TOK_EQ
   37      | TOK_NE
   38      | TOK_LT
   39      | TOK_LE
   40      | TOK_GT
   41      | TOK_GE
   42      | TOK_IDENT
   43      | TOK_INTCON
   44      | TOK_CHARCON
   45      | TOK_STRINGCON


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 22
    '(' (40) 12
    ')' (41) 13
    '*' (42) 20
    '+' (43) 18
    ',' (44) 16
    '-' (45) 19
    '/' (47) 21
    ';' (59) 3 6
    '=' (61) 17
    '[' (91) 8 14
    ']' (93) 8 15
    '{' (123) 6
    '}' (125) 2 6
    error (256) 2 3
    TOK_VOID (258) 25
    TOK_INT (259) 9 26
    TOK_STRING (260) 10 27
    TOK_IF (261) 28
    TOK_ELSE (262) 29
    TOK_WHILE (263) 30
    TOK_RETURN (264) 31
    TOK_STRUCT (265) 6
    TOK_NULLPTR (266) 32
    TOK_ARRAY (267) 8 33
    TOK_ARROW (268) 34
    TOK_ALLOC (269) 35
    TOK_PTR (270) 11 24
    TOK_EQ (271) 36
    TOK_NE (272) 37
    TOK_LT (273) 38
    TOK_LE (274) 39
    TOK_GT (275) 40
    TOK_GE (276) 41
    TOK_NOT (277) 23
    TOK_IDENT (278) 6 42
    TOK_INTCON (279) 43
    TOK_CHARCON (280) 44
    TOK_STRINGCON (281) 45
    TOK_ROOT (282) 25
    TOK_BLOCK (283)
    TOK_CALL (284)


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program (45)
        on left: 1 2 3 4 5
        on right: 0 1 2 3 4
    structdef (46)
        on left: 6
        on right: 1
    type (47)
        on left: 7 8
        on right: 6
    plaintype (48)
        on left: 9 10 11
        on right: 7 8
    token (49)
        on left: 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
        on right: 4


State 0

    0 $accept: . program $end

    $default  reduce using rule 5 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . error '}'
    3        | program . error ';'
    4        | program . token

    $end           shift, and go to state 2
    error          shift, and go to state 3
    TOK_INT        shift, and go to state 4
    TOK_STRING     shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_ELSE       shift, and go to state 7
    TOK_WHILE      shift, and go to state 8
    TOK_RETURN     shift, and go to state 9
    TOK_STRUCT     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 11
    TOK_ARRAY      shift, and go to state 12
    TOK_ARROW      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_EQ         shift, and go to state 16
    TOK_NE         shift, and go to state 17
    TOK_LT         shift, and go to state 18
    TOK_LE         shift, and go to state 19
    TOK_GT         shift, and go to state 20
    TOK_GE         shift, and go to state 21
    TOK_NOT        shift, and go to state 22
    TOK_IDENT      shift, and go to state 23
    TOK_INTCON     shift, and go to state 24
    TOK_CHARCON    shift, and go to state 25
    TOK_STRINGCON  shift, and go to state 26
    TOK_ROOT       shift, and go to state 27
    '['            shift, and go to state 28
    ']'            shift, and go to state 29
    '('            shift, and go to state 30
    ')'            shift, and go to state 31
    ','            shift, and go to state 32
    '='            shift, and go to state 33
    '+'            shift, and go to state 34
    '-'            shift, and go to state 35
    '*'            shift, and go to state 36
    '/'            shift, and go to state 37
    '%'            shift, and go to state 38

    structdef  go to state 39
    token      go to state 40


State 2

    0 $accept: program $end .

    $default  accept


State 3

    2 program: program error . '}'
    3        | program error . ';'

    '}'  shift, and go to state 41
    ';'  shift, and go to state 42


State 4

   26 token: TOK_INT .

    $default  reduce using rule 26 (token)


State 5

   27 token: TOK_STRING .

    $default  reduce using rule 27 (token)


State 6

   28 token: TOK_IF .

    $default  reduce using rule 28 (token)


State 7

   29 token: TOK_ELSE .

    $default  reduce using rule 29 (token)


State 8

   30 token: TOK_WHILE .

    $default  reduce using rule 30 (token)


State 9

   31 token: TOK_RETURN .

    $default  reduce using rule 31 (token)


State 10

    6 structdef: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 43


State 11

   32 token: TOK_NULLPTR .

    $default  reduce using rule 32 (token)


State 12

   33 token: TOK_ARRAY .

    $default  reduce using rule 33 (token)


State 13

   34 token: TOK_ARROW .

    $default  reduce using rule 34 (token)


State 14

   35 token: TOK_ALLOC .

    $default  reduce using rule 35 (token)


State 15

   24 token: TOK_PTR .

    $default  reduce using rule 24 (token)


State 16

   36 token: TOK_EQ .

    $default  reduce using rule 36 (token)


State 17

   37 token: TOK_NE .

    $default  reduce using rule 37 (token)


State 18

   38 token: TOK_LT .

    $default  reduce using rule 38 (token)


State 19

   39 token: TOK_LE .

    $default  reduce using rule 39 (token)


State 20

   40 token: TOK_GT .

    $default  reduce using rule 40 (token)


State 21

   41 token: TOK_GE .

    $default  reduce using rule 41 (token)


State 22

   23 token: TOK_NOT .

    $default  reduce using rule 23 (token)


State 23

   42 token: TOK_IDENT .

    $default  reduce using rule 42 (token)


State 24

   43 token: TOK_INTCON .

    $default  reduce using rule 43 (token)


State 25

   44 token: TOK_CHARCON .

    $default  reduce using rule 44 (token)


State 26

   45 token: TOK_STRINGCON .

    $default  reduce using rule 45 (token)


State 27

   25 token: TOK_ROOT . TOK_VOID

    TOK_VOID  shift, and go to state 44


State 28

   14 token: '[' .

    $default  reduce using rule 14 (token)


State 29

   15 token: ']' .

    $default  reduce using rule 15 (token)


State 30

   12 token: '(' .

    $default  reduce using rule 12 (token)


State 31

   13 token: ')' .

    $default  reduce using rule 13 (token)


State 32

   16 token: ',' .

    $default  reduce using rule 16 (token)


State 33

   17 token: '=' .

    $default  reduce using rule 17 (token)


State 34

   18 token: '+' .

    $default  reduce using rule 18 (token)


State 35

   19 token: '-' .

    $default  reduce using rule 19 (token)


State 36

   20 token: '*' .

    $default  reduce using rule 20 (token)


State 37

   21 token: '/' .

    $default  reduce using rule 21 (token)


State 38

   22 token: '%' .

    $default  reduce using rule 22 (token)


State 39

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 40

    4 program: program token .

    $default  reduce using rule 4 (program)


State 41

    2 program: program error '}' .

    $default  reduce using rule 2 (program)


State 42

    3 program: program error ';' .

    $default  reduce using rule 3 (program)


State 43

    6 structdef: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT '}' ';'

    '{'  shift, and go to state 45


State 44

   25 token: TOK_ROOT TOK_VOID .

    $default  reduce using rule 25 (token)


State 45

    6 structdef: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT '}' ';'

    TOK_INT     shift, and go to state 46
    TOK_STRING  shift, and go to state 47
    TOK_ARRAY   shift, and go to state 48
    TOK_PTR     shift, and go to state 49

    type       go to state 50
    plaintype  go to state 51


State 46

    9 plaintype: TOK_INT .

    $default  reduce using rule 9 (plaintype)


State 47

   10 plaintype: TOK_STRING .

    $default  reduce using rule 10 (plaintype)


State 48

    8 type: TOK_ARRAY . '[' plaintype ']'

    '['  shift, and go to state 52


State 49

   11 plaintype: TOK_PTR .

    $default  reduce using rule 11 (plaintype)


State 50

    6 structdef: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 53


State 51

    7 type: plaintype .

    $default  reduce using rule 7 (type)


State 52

    8 type: TOK_ARRAY '[' . plaintype ']'

    TOK_INT     shift, and go to state 46
    TOK_STRING  shift, and go to state 47
    TOK_PTR     shift, and go to state 49

    plaintype  go to state 54


State 53

    6 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . '}' ';'

    '}'  shift, and go to state 55


State 54

    8 type: TOK_ARRAY '[' plaintype . ']'

    ']'  shift, and go to state 56


State 55

    6 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' . ';'

    ';'  shift, and go to state 57


State 56

    8 type: TOK_ARRAY '[' plaintype ']' .

    $default  reduce using rule 8 (type)


State 57

    6 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';' .

    $default  reduce using rule 6 (structdef)
