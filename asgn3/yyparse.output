Nonterminals useless in grammar

    start
    token


Terminals unused in grammar

    TOK_IF
    TOK_ELSE
    TOK_WHILE
    TOK_RETURN
    TOK_NULLPTR
    TOK_ALLOC
    TOK_EQ
    TOK_NE
    TOK_LT
    TOK_LE
    TOK_GT
    TOK_GE
    TOK_NOT
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    '^'
    '['
    ']'


Rules useless in grammar

   41 start: program

   42 token: '['
   43      | ']'
   44      | ','
   45      | '}'
   46      | '{'
   47      | ';'
   48      | '='
   49      | '+'
   50      | '-'
   51      | '*'
   52      | '/'
   53      | '%'
   54      | TOK_NOT
   55      | TOK_PTR
   56      | TOK_ROOT
   57      | TOK_VOID
   58      | TOK_INT
   59      | TOK_STRING
   60      | TOK_IF
   61      | TOK_ELSE
   62      | TOK_WHILE
   63      | TOK_RETURN
   64      | TOK_NULLPTR
   65      | TOK_ARRAY
   66      | TOK_ARROW
   67      | TOK_ALLOC
   68      | TOK_EQ
   69      | TOK_NE
   70      | TOK_LT
   71      | TOK_LE
   72      | TOK_GT
   73      | TOK_GE
   74      | TOK_IDENT
   75      | TOK_INTCON
   76      | TOK_CHARCON
   77      | TOK_STRINGCON


State 5 conflicts: 1 reduce/reduce
State 6 conflicts: 1 reduce/reduce
State 9 conflicts: 1 reduce/reduce
State 54 conflicts: 2 shift/reduce
State 55 conflicts: 2 shift/reduce
State 56 conflicts: 2 shift/reduce
State 57 conflicts: 2 shift/reduce
State 58 conflicts: 2 shift/reduce
State 59 conflicts: 7 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program vardecl
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 type: plaintype
    8     | TOK_ARRAY

    9 returntype: TOK_INT
   10           | TOK_STRING
   11           | TOK_PTR
   12           | TOK_VOID

   13 plaintype: TOK_INT
   14          | TOK_STRING
   15          | TOK_PTR

   16 function: returntype TOK_IDENT '(' ')' block

   17 vardecl: type TOK_IDENT ';'
   18        | type TOK_IDENT '=' expr ';'

   19 expr: expr '+' expr
   20     | expr '-' expr
   21     | expr '*' expr
   22     | expr '/' expr
   23     | expr '%' expr
   24     | variable
   25     | call
   26     | constant

   27 constant: TOK_INTCON
   28         | TOK_STRINGCON
   29         | TOK_CHARCON

   30 call: TOK_IDENT '(' expr ')'

   31 block: '{' statement '}'
   32      | '{' statement statement '}'
   33      | ';'

   34 statement: vardecl
   35          | block
   36          | expr ';'

   37 variable: TOK_IDENT
   38         | expr ',' expr
   39         | expr TOK_ARROW TOK_IDENT

   40 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';'


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 23
    '(' (40) 16 30
    ')' (41) 16 30
    '*' (42) 21
    '+' (43) 19
    ',' (44) 38
    '-' (45) 20
    '/' (47) 22
    ';' (59) 5 17 18 33 36 40
    '=' (61) 18
    '[' (91)
    ']' (93)
    '^' (94)
    '{' (123) 31 32 40
    '}' (125) 4 31 32 40
    error (256) 4 5
    TOK_VOID (258) 12
    TOK_INT (259) 9 13
    TOK_STRING (260) 10 14
    TOK_IF (261)
    TOK_ELSE (262)
    TOK_WHILE (263)
    TOK_RETURN (264)
    TOK_STRUCT (265) 40
    TOK_NULLPTR (266)
    TOK_ARRAY (267) 8
    TOK_ARROW (268) 39
    TOK_ALLOC (269)
    TOK_PTR (270) 11 15
    TOK_EQ (271)
    TOK_NE (272)
    TOK_LT (273)
    TOK_LE (274)
    TOK_GT (275)
    TOK_GE (276)
    TOK_NOT (277)
    TOK_IDENT (278) 16 17 18 30 37 39 40
    TOK_INTCON (279) 27
    TOK_CHARCON (280) 29
    TOK_STRINGCON (281) 28
    TOK_ROOT (282)
    TOK_BLOCK (283)
    TOK_CALL (284)


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program (46)
        on left: 1 2 3 4 5 6
        on right: 0 1 2 3 4 5
    type (47)
        on left: 7 8
        on right: 17 18 40
    returntype (48)
        on left: 9 10 11 12
        on right: 16
    plaintype (49)
        on left: 13 14 15
        on right: 7
    function (50)
        on left: 16
        on right: 2
    vardecl (51)
        on left: 17 18
        on right: 3 34
    expr (52)
        on left: 19 20 21 22 23 24 25 26
        on right: 18 19 20 21 22 23 30 36 38 39
    constant (53)
        on left: 27 28 29
        on right: 26
    call (54)
        on left: 30
        on right: 25
    block (55)
        on left: 31 32 33
        on right: 16 35
    statement (56)
        on left: 34 35 36
        on right: 31 32
    variable (57)
        on left: 37 38 39
        on right: 24
    structdef (58)
        on left: 40
        on right: 1


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . vardecl
    4        | program . error '}'
    5        | program . error ';'

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type        go to state 10
    returntype  go to state 11
    plaintype   go to state 12
    function    go to state 13
    vardecl     go to state 14
    structdef   go to state 15


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 16
    ';'  shift, and go to state 17


State 4

   12 returntype: TOK_VOID .

    $default  reduce using rule 12 (returntype)


State 5

    9 returntype: TOK_INT .
   13 plaintype: TOK_INT .

    TOK_IDENT  reduce using rule 9 (returntype)
    TOK_IDENT  [reduce using rule 13 (plaintype)]
    $default   reduce using rule 9 (returntype)


State 6

   10 returntype: TOK_STRING .
   14 plaintype: TOK_STRING .

    TOK_IDENT  reduce using rule 10 (returntype)
    TOK_IDENT  [reduce using rule 14 (plaintype)]
    $default   reduce using rule 10 (returntype)


State 7

   40 structdef: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 18


State 8

    8 type: TOK_ARRAY .

    $default  reduce using rule 8 (type)


State 9

   11 returntype: TOK_PTR .
   15 plaintype: TOK_PTR .

    TOK_IDENT  reduce using rule 11 (returntype)
    TOK_IDENT  [reduce using rule 15 (plaintype)]
    $default   reduce using rule 11 (returntype)


State 10

   17 vardecl: type . TOK_IDENT ';'
   18        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 19


State 11

   16 function: returntype . TOK_IDENT '(' ')' block

    TOK_IDENT  shift, and go to state 20


State 12

    7 type: plaintype .

    $default  reduce using rule 7 (type)


State 13

    2 program: program function .

    $default  reduce using rule 2 (program)


State 14

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 15

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 16

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 17

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 18

   40 structdef: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT '}' ';'

    '{'  shift, and go to state 21


State 19

   17 vardecl: type TOK_IDENT . ';'
   18        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 22
    ';'  shift, and go to state 23


State 20

   16 function: returntype TOK_IDENT . '(' ')' block

    '('  shift, and go to state 24


State 21

   40 structdef: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT '}' ';'

    TOK_INT     shift, and go to state 25
    TOK_STRING  shift, and go to state 26
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 27

    type       go to state 28
    plaintype  go to state 12


State 22

   18 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_IDENT      shift, and go to state 29
    TOK_INTCON     shift, and go to state 30
    TOK_CHARCON    shift, and go to state 31
    TOK_STRINGCON  shift, and go to state 32

    expr      go to state 33
    constant  go to state 34
    call      go to state 35
    variable  go to state 36


State 23

   17 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 17 (vardecl)


State 24

   16 function: returntype TOK_IDENT '(' . ')' block

    ')'  shift, and go to state 37


State 25

   13 plaintype: TOK_INT .

    $default  reduce using rule 13 (plaintype)


State 26

   14 plaintype: TOK_STRING .

    $default  reduce using rule 14 (plaintype)


State 27

   15 plaintype: TOK_PTR .

    $default  reduce using rule 15 (plaintype)


State 28

   40 structdef: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT '}' ';'

    TOK_IDENT  shift, and go to state 38


State 29

   30 call: TOK_IDENT . '(' expr ')'
   37 variable: TOK_IDENT .

    '('  shift, and go to state 39

    $default  reduce using rule 37 (variable)


State 30

   27 constant: TOK_INTCON .

    $default  reduce using rule 27 (constant)


State 31

   29 constant: TOK_CHARCON .

    $default  reduce using rule 29 (constant)


State 32

   28 constant: TOK_STRINGCON .

    $default  reduce using rule 28 (constant)


State 33

   18 vardecl: type TOK_IDENT '=' expr . ';'
   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '%' expr
   38 variable: expr . ',' expr
   39         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ';'        shift, and go to state 46
    ','        shift, and go to state 47


State 34

   26 expr: constant .

    $default  reduce using rule 26 (expr)


State 35

   25 expr: call .

    $default  reduce using rule 25 (expr)


State 36

   24 expr: variable .

    $default  reduce using rule 24 (expr)


State 37

   16 function: returntype TOK_IDENT '(' ')' . block

    ';'  shift, and go to state 48
    '{'  shift, and go to state 49

    block  go to state 50


State 38

   40 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . '}' ';'

    '}'  shift, and go to state 51


State 39

   30 call: TOK_IDENT '(' . expr ')'

    TOK_IDENT      shift, and go to state 29
    TOK_INTCON     shift, and go to state 30
    TOK_CHARCON    shift, and go to state 31
    TOK_STRINGCON  shift, and go to state 32

    expr      go to state 52
    constant  go to state 34
    call      go to state 35
    variable  go to state 36


State 40

   39 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 53


State 41

   19 expr: expr '+' . expr

    TOK_IDENT      shift, and go to state 29
    TOK_INTCON     shift, and go to state 30
    TOK_CHARCON    shift, and go to state 31
    TOK_STRINGCON  shift, and go to state 32

    expr      go to state 54
    constant  go to state 34
    call      go to state 35
    variable  go to state 36


State 42

   20 expr: expr '-' . expr

    TOK_IDENT      shift, and go to state 29
    TOK_INTCON     shift, and go to state 30
    TOK_CHARCON    shift, and go to state 31
    TOK_STRINGCON  shift, and go to state 32

    expr      go to state 55
    constant  go to state 34
    call      go to state 35
    variable  go to state 36


State 43

   21 expr: expr '*' . expr

    TOK_IDENT      shift, and go to state 29
    TOK_INTCON     shift, and go to state 30
    TOK_CHARCON    shift, and go to state 31
    TOK_STRINGCON  shift, and go to state 32

    expr      go to state 56
    constant  go to state 34
    call      go to state 35
    variable  go to state 36


State 44

   22 expr: expr '/' . expr

    TOK_IDENT      shift, and go to state 29
    TOK_INTCON     shift, and go to state 30
    TOK_CHARCON    shift, and go to state 31
    TOK_STRINGCON  shift, and go to state 32

    expr      go to state 57
    constant  go to state 34
    call      go to state 35
    variable  go to state 36


State 45

   23 expr: expr '%' . expr

    TOK_IDENT      shift, and go to state 29
    TOK_INTCON     shift, and go to state 30
    TOK_CHARCON    shift, and go to state 31
    TOK_STRINGCON  shift, and go to state 32

    expr      go to state 58
    constant  go to state 34
    call      go to state 35
    variable  go to state 36


State 46

   18 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 18 (vardecl)


State 47

   38 variable: expr ',' . expr

    TOK_IDENT      shift, and go to state 29
    TOK_INTCON     shift, and go to state 30
    TOK_CHARCON    shift, and go to state 31
    TOK_STRINGCON  shift, and go to state 32

    expr      go to state 59
    constant  go to state 34
    call      go to state 35
    variable  go to state 36


State 48

   33 block: ';' .

    $default  reduce using rule 33 (block)


State 49

   31 block: '{' . statement '}'
   32      | '{' . statement statement '}'

    TOK_INT        shift, and go to state 25
    TOK_STRING     shift, and go to state 26
    TOK_ARRAY      shift, and go to state 8
    TOK_PTR        shift, and go to state 27
    TOK_IDENT      shift, and go to state 29
    TOK_INTCON     shift, and go to state 30
    TOK_CHARCON    shift, and go to state 31
    TOK_STRINGCON  shift, and go to state 32
    ';'            shift, and go to state 48
    '{'            shift, and go to state 49

    type       go to state 10
    plaintype  go to state 12
    vardecl    go to state 60
    expr       go to state 61
    constant   go to state 34
    call       go to state 35
    block      go to state 62
    statement  go to state 63
    variable   go to state 36


State 50

   16 function: returntype TOK_IDENT '(' ')' block .

    $default  reduce using rule 16 (function)


State 51

   40 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' . ';'

    ';'  shift, and go to state 64


State 52

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '%' expr
   30 call: TOK_IDENT '(' expr . ')'
   38 variable: expr . ',' expr
   39         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ')'        shift, and go to state 65
    ','        shift, and go to state 47


State 53

   39 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 39 (variable)


State 54

   19 expr: expr . '+' expr
   19     | expr '+' expr .
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '%' expr
   38 variable: expr . ',' expr
   39         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 40
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 19 (expr)]
    ','        [reduce using rule 19 (expr)]
    $default   reduce using rule 19 (expr)


State 55

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   20     | expr '-' expr .
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '%' expr
   38 variable: expr . ',' expr
   39         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 40
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 20 (expr)]
    ','        [reduce using rule 20 (expr)]
    $default   reduce using rule 20 (expr)


State 56

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   21     | expr '*' expr .
   22     | expr . '/' expr
   23     | expr . '%' expr
   38 variable: expr . ',' expr
   39         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 40
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 21 (expr)]
    ','        [reduce using rule 21 (expr)]
    $default   reduce using rule 21 (expr)


State 57

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   22     | expr '/' expr .
   23     | expr . '%' expr
   38 variable: expr . ',' expr
   39         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 40
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 22 (expr)]
    ','        [reduce using rule 22 (expr)]
    $default   reduce using rule 22 (expr)


State 58

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '%' expr
   23     | expr '%' expr .
   38 variable: expr . ',' expr
   39         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 40
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 23 (expr)]
    ','        [reduce using rule 23 (expr)]
    $default   reduce using rule 23 (expr)


State 59

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '%' expr
   38 variable: expr . ',' expr
   38         | expr ',' expr .
   39         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ','        shift, and go to state 47

    TOK_ARROW  [reduce using rule 38 (variable)]
    '+'        [reduce using rule 38 (variable)]
    '-'        [reduce using rule 38 (variable)]
    '*'        [reduce using rule 38 (variable)]
    '/'        [reduce using rule 38 (variable)]
    '%'        [reduce using rule 38 (variable)]
    ','        [reduce using rule 38 (variable)]
    $default   reduce using rule 38 (variable)


State 60

   34 statement: vardecl .

    $default  reduce using rule 34 (statement)


State 61

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '%' expr
   36 statement: expr . ';'
   38 variable: expr . ',' expr
   39         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '*'        shift, and go to state 43
    '/'        shift, and go to state 44
    '%'        shift, and go to state 45
    ';'        shift, and go to state 66
    ','        shift, and go to state 47


State 62

   35 statement: block .

    $default  reduce using rule 35 (statement)


State 63

   31 block: '{' statement . '}'
   32      | '{' statement . statement '}'

    TOK_INT        shift, and go to state 25
    TOK_STRING     shift, and go to state 26
    TOK_ARRAY      shift, and go to state 8
    TOK_PTR        shift, and go to state 27
    TOK_IDENT      shift, and go to state 29
    TOK_INTCON     shift, and go to state 30
    TOK_CHARCON    shift, and go to state 31
    TOK_STRINGCON  shift, and go to state 32
    '}'            shift, and go to state 67
    ';'            shift, and go to state 48
    '{'            shift, and go to state 49

    type       go to state 10
    plaintype  go to state 12
    vardecl    go to state 60
    expr       go to state 61
    constant   go to state 34
    call       go to state 35
    block      go to state 62
    statement  go to state 68
    variable   go to state 36


State 64

   40 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT '}' ';' .

    $default  reduce using rule 40 (structdef)


State 65

   30 call: TOK_IDENT '(' expr ')' .

    $default  reduce using rule 30 (call)


State 66

   36 statement: expr ';' .

    $default  reduce using rule 36 (statement)


State 67

   31 block: '{' statement '}' .

    $default  reduce using rule 31 (block)


State 68

   32 block: '{' statement statement . '}'

    '}'  shift, and go to state 69


State 69

   32 block: '{' statement statement '}' .

    $default  reduce using rule 32 (block)
