Nonterminals useless in grammar

    start


Terminals unused in grammar

    TOK_NOT
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    TOK_FUNC
    TOK_TYPE_ID
    TOK_PARAM
    '^'


Rules useless in grammar

   67 start: program


State 10 conflicts: 5 shift/reduce
State 12 conflicts: 1 shift/reduce
State 13 conflicts: 5 shift/reduce
State 35 conflicts: 5 shift/reduce
State 42 conflicts: 1 shift/reduce
State 50 conflicts: 8 shift/reduce
State 57 conflicts: 18 shift/reduce
State 61 conflicts: 1 shift/reduce
State 84 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program vardecl
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: TOK_STRUCT TOK_IDENT '{'
    8          | structdef type TOK_IDENT ';'
    9          | structdef '}' ';'

   10 type: plaintype
   11     | TOK_ARRAY

   12 plaintype: TOK_INT
   13          | TOK_STRING
   14          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   15          | TOK_VOID

   16 function: plaintype TOK_IDENT '('
   17         | function parameters
   18         | function ')' block

   19 parameters: type TOK_IDENT
   20           | parameters ',' type TOK_IDENT

   21 block: '{'
   22      | block statement
   23      | block '}'

   24 statement: vardecl
   25          | expr ';'
   26          | block
   27          | while
   28          | ifelse
   29          | return
   30          | ';'

   31 vardecl: type TOK_IDENT ';'
   32        | type TOK_IDENT '=' expr ';'

   33 while: TOK_WHILE '(' expr ')' statement

   34 ifelse: TOK_IF '(' expr ')' statement
   35       | ifelse TOK_ELSE statement

   36 return: TOK_RETURN expr ';'
   37       | TOK_RETURN ';'

   38 expr: expr '+' expr
   39     | expr '-' expr
   40     | expr '*' expr
   41     | expr '/' expr
   42     | expr '%' expr
   43     | expr '=' expr
   44     | expr TOK_GT expr
   45     | expr TOK_LT expr
   46     | expr TOK_LE expr
   47     | expr TOK_GE expr
   48     | expr TOK_EQ expr
   49     | expr TOK_NE expr
   50     | variable
   51     | call
   52     | constant
   53     | allocator
   54     | '(' expr ')'

   55 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   56          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   57          | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

   58 constant: TOK_INTCON
   59         | TOK_STRINGCON
   60         | TOK_CHARCON
   61         | TOK_NULLPTR

   62 call: TOK_IDENT '('
   63     | call expr
   64     | call ')'

   65 variable: TOK_IDENT
   66         | expr TOK_ARROW TOK_IDENT


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 42
    '(' (40) 16 33 34 54 55 56 57 62
    ')' (41) 18 33 34 54 55 56 57 64
    '*' (42) 40
    '+' (43) 38
    ',' (44) 20
    '-' (45) 39
    '/' (47) 41
    ';' (59) 5 8 9 25 30 31 32 36 37
    '=' (61) 32 43
    '^' (94)
    '{' (123) 7 21
    '}' (125) 4 9 23
    error (256) 4 5
    TOK_VOID (258) 15
    TOK_INT (259) 12
    TOK_STRING (260) 13 55
    TOK_IF (261) 34
    TOK_ELSE (262) 35
    TOK_WHILE (263) 33
    TOK_RETURN (264) 36 37
    TOK_STRUCT (265) 7 14 56
    TOK_NULLPTR (266) 61
    TOK_ARRAY (267) 11 57
    TOK_ARROW (268) 66
    TOK_ALLOC (269) 55 56 57
    TOK_PTR (270) 14
    TOK_EQ (271) 48
    TOK_NE (272) 49
    TOK_LT (273) 14 45 55 56 57
    TOK_LE (274) 46
    TOK_GT (275) 14 44 55 56 57
    TOK_GE (276) 47
    TOK_NOT (277)
    TOK_IDENT (278) 7 8 14 16 19 20 31 32 56 62 65 66
    TOK_INTCON (279) 58
    TOK_CHARCON (280) 60
    TOK_STRINGCON (281) 59
    TOK_ROOT (282)
    TOK_BLOCK (283)
    TOK_CALL (284)
    TOK_FUNC (285)
    TOK_TYPE_ID (286)
    TOK_PARAM (287)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    program (47)
        on left: 1 2 3 4 5 6
        on right: 0 1 2 3 4 5
    structdef (48)
        on left: 7 8 9
        on right: 1 8 9
    type (49)
        on left: 10 11
        on right: 8 19 20 31 32
    plaintype (50)
        on left: 12 13 14 15
        on right: 10 16 57
    function (51)
        on left: 16 17 18
        on right: 2 17 18
    parameters (52)
        on left: 19 20
        on right: 17 20
    block (53)
        on left: 21 22 23
        on right: 18 22 23 26
    statement (54)
        on left: 24 25 26 27 28 29 30
        on right: 22 33 34 35
    vardecl (55)
        on left: 31 32
        on right: 3 24
    while (56)
        on left: 33
        on right: 27
    ifelse (57)
        on left: 34 35
        on right: 28 35
    return (58)
        on left: 36 37
        on right: 29
    expr (59)
        on left: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54
        on right: 25 32 33 34 36 38 39 40 41 42 43 44 45 46 47 48 49 54 55 57 63 66
    allocator (60)
        on left: 55 56 57
        on right: 53
    constant (61)
        on left: 58 59 60 61
        on right: 52
    call (62)
        on left: 62 63 64
        on right: 51 63 64
    variable (63)
        on left: 65 66
        on right: 50


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . vardecl
    4        | program . error '}'
    5        | program . error ';'

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    structdef  go to state 10
    type       go to state 11
    plaintype  go to state 12
    function   go to state 13
    vardecl    go to state 14


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 15
    ';'  shift, and go to state 16


State 4

   15 plaintype: TOK_VOID .

    $default  reduce using rule 15 (plaintype)


State 5

   12 plaintype: TOK_INT .

    $default  reduce using rule 12 (plaintype)


State 6

   13 plaintype: TOK_STRING .

    $default  reduce using rule 13 (plaintype)


State 7

    7 structdef: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 17


State 8

   11 type: TOK_ARRAY .

    $default  reduce using rule 11 (type)


State 9

   14 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 18


State 10

    1 program: program structdef .
    8 structdef: structdef . type TOK_IDENT ';'
    9          | structdef . '}' ';'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    '}'         shift, and go to state 19

    TOK_VOID    [reduce using rule 1 (program)]
    TOK_INT     [reduce using rule 1 (program)]
    TOK_STRING  [reduce using rule 1 (program)]
    TOK_ARRAY   [reduce using rule 1 (program)]
    TOK_PTR     [reduce using rule 1 (program)]
    $default    reduce using rule 1 (program)

    type       go to state 20
    plaintype  go to state 21


State 11

   31 vardecl: type . TOK_IDENT ';'
   32        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 22


State 12

   10 type: plaintype .
   16 function: plaintype . TOK_IDENT '('

    TOK_IDENT  shift, and go to state 23

    TOK_IDENT  [reduce using rule 10 (type)]


State 13

    2 program: program function .
   17 function: function . parameters
   18         | function . ')' block

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    ')'         shift, and go to state 24

    TOK_VOID    [reduce using rule 2 (program)]
    TOK_INT     [reduce using rule 2 (program)]
    TOK_STRING  [reduce using rule 2 (program)]
    TOK_ARRAY   [reduce using rule 2 (program)]
    TOK_PTR     [reduce using rule 2 (program)]
    $default    reduce using rule 2 (program)

    type        go to state 25
    plaintype   go to state 21
    parameters  go to state 26


State 14

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 15

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 16

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 17

    7 structdef: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 27


State 18

   14 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 28


State 19

    9 structdef: structdef '}' . ';'

    ';'  shift, and go to state 29


State 20

    8 structdef: structdef type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 30


State 21

   10 type: plaintype .

    $default  reduce using rule 10 (type)


State 22

   31 vardecl: type TOK_IDENT . ';'
   32        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 31
    ';'  shift, and go to state 32


State 23

   16 function: plaintype TOK_IDENT . '('

    '('  shift, and go to state 33


State 24

   18 function: function ')' . block

    '{'  shift, and go to state 34

    block  go to state 35


State 25

   19 parameters: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 36


State 26

   17 function: function parameters .
   20 parameters: parameters . ',' type TOK_IDENT

    ','  shift, and go to state 37

    $default  reduce using rule 17 (function)


State 27

    7 structdef: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 7 (structdef)


State 28

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 38


State 29

    9 structdef: structdef '}' ';' .

    $default  reduce using rule 9 (structdef)


State 30

    8 structdef: structdef type TOK_IDENT . ';'

    ';'  shift, and go to state 39


State 31

   32 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 47
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 32

   31 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 31 (vardecl)


State 33

   16 function: plaintype TOK_IDENT '(' .

    $default  reduce using rule 16 (function)


State 34

   21 block: '{' .

    $default  reduce using rule 21 (block)


State 35

   18 function: function ')' block .
   22 block: block . statement
   23      | block . '}'

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 52
    TOK_WHILE      shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_NULLPTR    shift, and go to state 40
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 41
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '}'            shift, and go to state 55
    ';'            shift, and go to state 56
    '{'            shift, and go to state 34
    '('            shift, and go to state 46

    TOK_VOID    [reduce using rule 18 (function)]
    TOK_INT     [reduce using rule 18 (function)]
    TOK_STRING  [reduce using rule 18 (function)]
    TOK_ARRAY   [reduce using rule 18 (function)]
    TOK_PTR     [reduce using rule 18 (function)]
    $default    reduce using rule 18 (function)

    type       go to state 11
    plaintype  go to state 21
    block      go to state 57
    statement  go to state 58
    vardecl    go to state 59
    while      go to state 60
    ifelse     go to state 61
    return     go to state 62
    expr       go to state 63
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 36

   19 parameters: type TOK_IDENT .

    $default  reduce using rule 19 (parameters)


State 37

   20 parameters: parameters ',' . type TOK_IDENT

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 64
    plaintype  go to state 21


State 38

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 65


State 39

    8 structdef: structdef type TOK_IDENT ';' .

    $default  reduce using rule 8 (structdef)


State 40

   61 constant: TOK_NULLPTR .

    $default  reduce using rule 61 (constant)


State 41

   55 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   56          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   57          | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 66


State 42

   62 call: TOK_IDENT . '('
   65 variable: TOK_IDENT .

    '('  shift, and go to state 67

    '('       [reduce using rule 65 (variable)]
    $default  reduce using rule 65 (variable)


State 43

   58 constant: TOK_INTCON .

    $default  reduce using rule 58 (constant)


State 44

   60 constant: TOK_CHARCON .

    $default  reduce using rule 60 (constant)


State 45

   59 constant: TOK_STRINGCON .

    $default  reduce using rule 59 (constant)


State 46

   54 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 68
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 47

   32 vardecl: type TOK_IDENT '=' expr . ';'
   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    TOK_EQ     shift, and go to state 70
    TOK_NE     shift, and go to state 71
    TOK_LT     shift, and go to state 72
    TOK_LE     shift, and go to state 73
    TOK_GT     shift, and go to state 74
    TOK_GE     shift, and go to state 75
    '='        shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ';'        shift, and go to state 82


State 48

   53 expr: allocator .

    $default  reduce using rule 53 (expr)


State 49

   52 expr: constant .

    $default  reduce using rule 52 (expr)


State 50

   51 expr: call .
   63 call: call . expr
   64     | call . ')'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46
    ')'            shift, and go to state 83

    TOK_NULLPTR    [reduce using rule 51 (expr)]
    TOK_ALLOC      [reduce using rule 51 (expr)]
    TOK_IDENT      [reduce using rule 51 (expr)]
    TOK_INTCON     [reduce using rule 51 (expr)]
    TOK_CHARCON    [reduce using rule 51 (expr)]
    TOK_STRINGCON  [reduce using rule 51 (expr)]
    '('            [reduce using rule 51 (expr)]
    ')'            [reduce using rule 51 (expr)]
    $default       reduce using rule 51 (expr)

    expr       go to state 84
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 51

   50 expr: variable .

    $default  reduce using rule 50 (expr)


State 52

   34 ifelse: TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 85


State 53

   33 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 86


State 54

   36 return: TOK_RETURN . expr ';'
   37       | TOK_RETURN . ';'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    ';'            shift, and go to state 87
    '('            shift, and go to state 46

    expr       go to state 88
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 55

   23 block: block '}' .

    $default  reduce using rule 23 (block)


State 56

   30 statement: ';' .

    $default  reduce using rule 30 (statement)


State 57

   22 block: block . statement
   23      | block . '}'
   26 statement: block .

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 52
    TOK_WHILE      shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_NULLPTR    shift, and go to state 40
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 41
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '}'            shift, and go to state 55
    ';'            shift, and go to state 56
    '{'            shift, and go to state 34
    '('            shift, and go to state 46

    TOK_VOID       [reduce using rule 26 (statement)]
    TOK_INT        [reduce using rule 26 (statement)]
    TOK_STRING     [reduce using rule 26 (statement)]
    TOK_IF         [reduce using rule 26 (statement)]
    TOK_WHILE      [reduce using rule 26 (statement)]
    TOK_RETURN     [reduce using rule 26 (statement)]
    TOK_NULLPTR    [reduce using rule 26 (statement)]
    TOK_ARRAY      [reduce using rule 26 (statement)]
    TOK_ALLOC      [reduce using rule 26 (statement)]
    TOK_PTR        [reduce using rule 26 (statement)]
    TOK_IDENT      [reduce using rule 26 (statement)]
    TOK_INTCON     [reduce using rule 26 (statement)]
    TOK_CHARCON    [reduce using rule 26 (statement)]
    TOK_STRINGCON  [reduce using rule 26 (statement)]
    '}'            [reduce using rule 26 (statement)]
    ';'            [reduce using rule 26 (statement)]
    '{'            [reduce using rule 26 (statement)]
    '('            [reduce using rule 26 (statement)]
    $default       reduce using rule 26 (statement)

    type       go to state 11
    plaintype  go to state 21
    block      go to state 57
    statement  go to state 58
    vardecl    go to state 59
    while      go to state 60
    ifelse     go to state 61
    return     go to state 62
    expr       go to state 63
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 58

   22 block: block statement .

    $default  reduce using rule 22 (block)


State 59

   24 statement: vardecl .

    $default  reduce using rule 24 (statement)


State 60

   27 statement: while .

    $default  reduce using rule 27 (statement)


State 61

   28 statement: ifelse .
   35 ifelse: ifelse . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 89

    TOK_ELSE  [reduce using rule 28 (statement)]
    $default  reduce using rule 28 (statement)


State 62

   29 statement: return .

    $default  reduce using rule 29 (statement)


State 63

   25 statement: expr . ';'
   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    TOK_EQ     shift, and go to state 70
    TOK_NE     shift, and go to state 71
    TOK_LT     shift, and go to state 72
    TOK_LE     shift, and go to state 73
    TOK_GT     shift, and go to state 74
    TOK_GE     shift, and go to state 75
    '='        shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ';'        shift, and go to state 90


State 64

   20 parameters: parameters ',' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 91


State 65

   14 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 14 (plaintype)


State 66

   55 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   56          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   57          | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_STRING  shift, and go to state 92
    TOK_STRUCT  shift, and go to state 93
    TOK_ARRAY   shift, and go to state 94


State 67

   62 call: TOK_IDENT '(' .

    $default  reduce using rule 62 (call)


State 68

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   54     | '(' expr . ')'
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    TOK_EQ     shift, and go to state 70
    TOK_NE     shift, and go to state 71
    TOK_LT     shift, and go to state 72
    TOK_LE     shift, and go to state 73
    TOK_GT     shift, and go to state 74
    TOK_GE     shift, and go to state 75
    '='        shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ')'        shift, and go to state 95


State 69

   66 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 96


State 70

   48 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 97
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 71

   49 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 98
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 72

   45 expr: expr TOK_LT . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 99
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 73

   46 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 100
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 74

   44 expr: expr TOK_GT . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 101
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 75

   47 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 102
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 76

   43 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 103
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 77

   38 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 104
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 78

   39 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 105
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 79

   40 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 106
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 80

   41 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 107
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 81

   42 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 108
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 82

   32 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 32 (vardecl)


State 83

   64 call: call ')' .

    $default  reduce using rule 64 (call)


State 84

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   63 call: call expr .
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    TOK_EQ     shift, and go to state 70
    TOK_NE     shift, and go to state 71
    TOK_LT     shift, and go to state 72
    TOK_LE     shift, and go to state 73
    TOK_GT     shift, and go to state 74
    TOK_GE     shift, and go to state 75
    '='        shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81

    TOK_ARROW  [reduce using rule 63 (call)]
    TOK_EQ     [reduce using rule 63 (call)]
    TOK_NE     [reduce using rule 63 (call)]
    TOK_LT     [reduce using rule 63 (call)]
    TOK_LE     [reduce using rule 63 (call)]
    TOK_GT     [reduce using rule 63 (call)]
    TOK_GE     [reduce using rule 63 (call)]
    '='        [reduce using rule 63 (call)]
    '+'        [reduce using rule 63 (call)]
    '-'        [reduce using rule 63 (call)]
    '*'        [reduce using rule 63 (call)]
    '/'        [reduce using rule 63 (call)]
    '%'        [reduce using rule 63 (call)]
    $default   reduce using rule 63 (call)


State 85

   34 ifelse: TOK_IF '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 109
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 86

   33 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 110
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 87

   37 return: TOK_RETURN ';' .

    $default  reduce using rule 37 (return)


State 88

   36 return: TOK_RETURN expr . ';'
   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    TOK_EQ     shift, and go to state 70
    TOK_NE     shift, and go to state 71
    TOK_LT     shift, and go to state 72
    TOK_LE     shift, and go to state 73
    TOK_GT     shift, and go to state 74
    TOK_GE     shift, and go to state 75
    '='        shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ';'        shift, and go to state 111


State 89

   35 ifelse: ifelse TOK_ELSE . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 52
    TOK_WHILE      shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_NULLPTR    shift, and go to state 40
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 41
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    ';'            shift, and go to state 56
    '{'            shift, and go to state 34
    '('            shift, and go to state 46

    type       go to state 11
    plaintype  go to state 21
    block      go to state 57
    statement  go to state 112
    vardecl    go to state 59
    while      go to state 60
    ifelse     go to state 61
    return     go to state 62
    expr       go to state 63
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 90

   25 statement: expr ';' .

    $default  reduce using rule 25 (statement)


State 91

   20 parameters: parameters ',' type TOK_IDENT .

    $default  reduce using rule 20 (parameters)


State 92

   55 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 113


State 93

   56 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 114


State 94

   57 allocator: TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 115


State 95

   54 expr: '(' expr ')' .

    $default  reduce using rule 54 (expr)


State 96

   66 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 66 (variable)


State 97

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   48     | expr TOK_EQ expr .
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81

    $default  reduce using rule 48 (expr)


State 98

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   49     | expr TOK_NE expr .
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81

    $default  reduce using rule 49 (expr)


State 99

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   45     | expr TOK_LT expr .
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81

    $default  reduce using rule 45 (expr)


State 100

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   46     | expr TOK_LE expr .
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81

    $default  reduce using rule 46 (expr)


State 101

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   44     | expr TOK_GT expr .
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81

    $default  reduce using rule 44 (expr)


State 102

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   47     | expr TOK_GE expr .
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81

    $default  reduce using rule 47 (expr)


State 103

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   43     | expr '=' expr .
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    TOK_EQ     shift, and go to state 70
    TOK_NE     shift, and go to state 71
    TOK_LT     shift, and go to state 72
    TOK_LE     shift, and go to state 73
    TOK_GT     shift, and go to state 74
    TOK_GE     shift, and go to state 75
    '='        shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81

    $default  reduce using rule 43 (expr)


State 104

   38 expr: expr . '+' expr
   38     | expr '+' expr .
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81

    $default  reduce using rule 38 (expr)


State 105

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   39     | expr '-' expr .
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81

    $default  reduce using rule 39 (expr)


State 106

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   40     | expr '*' expr .
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69

    $default  reduce using rule 40 (expr)


State 107

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   41     | expr '/' expr .
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69

    $default  reduce using rule 41 (expr)


State 108

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   42     | expr '%' expr .
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69

    $default  reduce using rule 42 (expr)


State 109

   34 ifelse: TOK_IF '(' expr . ')' statement
   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    TOK_EQ     shift, and go to state 70
    TOK_NE     shift, and go to state 71
    TOK_LT     shift, and go to state 72
    TOK_LE     shift, and go to state 73
    TOK_GT     shift, and go to state 74
    TOK_GE     shift, and go to state 75
    '='        shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ')'        shift, and go to state 116


State 110

   33 while: TOK_WHILE '(' expr . ')' statement
   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    TOK_EQ     shift, and go to state 70
    TOK_NE     shift, and go to state 71
    TOK_LT     shift, and go to state 72
    TOK_LE     shift, and go to state 73
    TOK_GT     shift, and go to state 74
    TOK_GE     shift, and go to state 75
    '='        shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ')'        shift, and go to state 117


State 111

   36 return: TOK_RETURN expr ';' .

    $default  reduce using rule 36 (return)


State 112

   35 ifelse: ifelse TOK_ELSE statement .

    $default  reduce using rule 35 (ifelse)


State 113

   55 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 118


State 114

   56 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 119


State 115

   57 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_PTR     shift, and go to state 9

    plaintype  go to state 120


State 116

   34 ifelse: TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 52
    TOK_WHILE      shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_NULLPTR    shift, and go to state 40
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 41
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    ';'            shift, and go to state 56
    '{'            shift, and go to state 34
    '('            shift, and go to state 46

    type       go to state 11
    plaintype  go to state 21
    block      go to state 57
    statement  go to state 121
    vardecl    go to state 59
    while      go to state 60
    ifelse     go to state 61
    return     go to state 62
    expr       go to state 63
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 117

   33 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 52
    TOK_WHILE      shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_NULLPTR    shift, and go to state 40
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 41
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    ';'            shift, and go to state 56
    '{'            shift, and go to state 34
    '('            shift, and go to state 46

    type       go to state 11
    plaintype  go to state 21
    block      go to state 57
    statement  go to state 122
    vardecl    go to state 59
    while      go to state 60
    ifelse     go to state 61
    return     go to state 62
    expr       go to state 63
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 118

   55 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 123
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 119

   56 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 124


State 120

   57 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype . TOK_GT TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 125


State 121

   34 ifelse: TOK_IF '(' expr ')' statement .

    $default  reduce using rule 34 (ifelse)


State 122

   33 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 33 (while)


State 123

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   55 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    TOK_EQ     shift, and go to state 70
    TOK_NE     shift, and go to state 71
    TOK_LT     shift, and go to state 72
    TOK_LE     shift, and go to state 73
    TOK_GT     shift, and go to state 74
    TOK_GE     shift, and go to state 75
    '='        shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ')'        shift, and go to state 126


State 124

   56 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 127


State 125

   57 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 128


State 126

   55 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 55 (allocator)


State 127

   56 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 56 (allocator)


State 128

   57 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT . '(' expr ')'

    '('  shift, and go to state 129


State 129

   57 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 40
    TOK_ALLOC      shift, and go to state 41
    TOK_IDENT      shift, and go to state 42
    TOK_INTCON     shift, and go to state 43
    TOK_CHARCON    shift, and go to state 44
    TOK_STRINGCON  shift, and go to state 45
    '('            shift, and go to state 46

    expr       go to state 130
    allocator  go to state 48
    constant   go to state 49
    call       go to state 50
    variable   go to state 51


State 130

   38 expr: expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '%' expr
   43     | expr . '=' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_LT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   57 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr . ')'
   66 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 69
    TOK_EQ     shift, and go to state 70
    TOK_NE     shift, and go to state 71
    TOK_LT     shift, and go to state 72
    TOK_LE     shift, and go to state 73
    TOK_GT     shift, and go to state 74
    TOK_GE     shift, and go to state 75
    '='        shift, and go to state 76
    '+'        shift, and go to state 77
    '-'        shift, and go to state 78
    '*'        shift, and go to state 79
    '/'        shift, and go to state 80
    '%'        shift, and go to state 81
    ')'        shift, and go to state 131


State 131

   57 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')' .

    $default  reduce using rule 57 (allocator)
