Nonterminals useless in grammar

    start


Terminals unused in grammar

    TOK_NOT
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    TOK_FUNC
    TOK_TYPE_ID
    TOK_PARAM
    '^'


Rules useless in grammar

   64 start: program


State 12 conflicts: 1 shift/reduce
State 31 conflicts: 1 shift/reduce
State 39 conflicts: 8 shift/reduce
State 64 conflicts: 13 shift/reduce
State 66 conflicts: 5 shift/reduce
State 93 conflicts: 18 shift/reduce
State 97 conflicts: 1 shift/reduce
State 100 conflicts: 5 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program vardecl
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' '}' ';'

    8 type: plaintype
    9     | TOK_ARRAY

   10 plaintype: TOK_INT
   11          | TOK_STRING
   12          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   13          | TOK_VOID

   14 function: plaintype TOK_IDENT '(' ')' block
   15         | plaintype TOK_IDENT '(' parameters ')' block

   16 parameters: type TOK_IDENT
   17           | parameters ',' type TOK_IDENT

   18 block: '{'
   19      | block statement
   20      | block '}'

   21 statement: vardecl
   22          | expr ';'
   23          | block
   24          | while
   25          | ifelse
   26          | return
   27          | ';'

   28 vardecl: type TOK_IDENT ';'
   29        | type TOK_IDENT '=' expr ';'

   30 while: TOK_WHILE '(' expr ')' statement

   31 ifelse: TOK_IF '(' expr ')' statement
   32       | ifelse TOK_ELSE statement

   33 return: TOK_RETURN expr ';'
   34       | TOK_RETURN ';'

   35 expr: expr '+' expr
   36     | expr '-' expr
   37     | expr '*' expr
   38     | expr '/' expr
   39     | expr '%' expr
   40     | expr '=' expr
   41     | expr TOK_GT expr
   42     | expr TOK_LT expr
   43     | expr TOK_LE expr
   44     | expr TOK_GE expr
   45     | expr TOK_EQ expr
   46     | expr TOK_NE expr
   47     | variable
   48     | call
   49     | constant
   50     | allocator
   51     | '(' expr ')'

   52 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   53          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   54          | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

   55 constant: TOK_INTCON
   56         | TOK_STRINGCON
   57         | TOK_CHARCON
   58         | TOK_NULLPTR

   59 call: TOK_IDENT '('
   60     | call expr
   61     | call ')'

   62 variable: TOK_IDENT
   63         | expr TOK_ARROW TOK_IDENT


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 39
    '(' (40) 14 15 30 31 51 52 53 54 59
    ')' (41) 14 15 30 31 51 52 53 54 61
    '*' (42) 37
    '+' (43) 35
    ',' (44) 17
    '-' (45) 36
    '/' (47) 38
    ';' (59) 5 7 22 27 28 29 33 34
    '=' (61) 29 40
    '^' (94)
    '{' (123) 7 18
    '}' (125) 4 7 20
    error (256) 4 5
    TOK_VOID (258) 13
    TOK_INT (259) 10
    TOK_STRING (260) 11 52
    TOK_IF (261) 31
    TOK_ELSE (262) 32
    TOK_WHILE (263) 30
    TOK_RETURN (264) 33 34
    TOK_STRUCT (265) 7 12 53
    TOK_NULLPTR (266) 58
    TOK_ARRAY (267) 9 54
    TOK_ARROW (268) 63
    TOK_ALLOC (269) 52 53 54
    TOK_PTR (270) 12
    TOK_EQ (271) 45
    TOK_NE (272) 46
    TOK_LT (273) 12 42 52 53 54
    TOK_LE (274) 43
    TOK_GT (275) 12 41 52 53 54
    TOK_GE (276) 44
    TOK_NOT (277)
    TOK_IDENT (278) 7 12 14 15 16 17 28 29 53 59 62 63
    TOK_INTCON (279) 55
    TOK_CHARCON (280) 57
    TOK_STRINGCON (281) 56
    TOK_ROOT (282)
    TOK_BLOCK (283)
    TOK_CALL (284)
    TOK_FUNC (285)
    TOK_TYPE_ID (286)
    TOK_PARAM (287)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    program (47)
        on left: 1 2 3 4 5 6
        on right: 0 1 2 3 4 5
    structdef (48)
        on left: 7
        on right: 1
    type (49)
        on left: 8 9
        on right: 7 16 17 28 29
    plaintype (50)
        on left: 10 11 12 13
        on right: 8 14 15 54
    function (51)
        on left: 14 15
        on right: 2
    parameters (52)
        on left: 16 17
        on right: 15 17
    block (53)
        on left: 18 19 20
        on right: 14 15 19 20 23
    statement (54)
        on left: 21 22 23 24 25 26 27
        on right: 19 30 31 32
    vardecl (55)
        on left: 28 29
        on right: 3 21
    while (56)
        on left: 30
        on right: 24
    ifelse (57)
        on left: 31 32
        on right: 25 32
    return (58)
        on left: 33 34
        on right: 26
    expr (59)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
        on right: 22 29 30 31 33 35 36 37 38 39 40 41 42 43 44 45 46 51 52 54 60 63
    allocator (60)
        on left: 52 53 54
        on right: 50
    constant (61)
        on left: 55 56 57 58
        on right: 49
    call (62)
        on left: 59 60 61
        on right: 48 60 61
    variable (63)
        on left: 62 63
        on right: 47


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . vardecl
    4        | program . error '}'
    5        | program . error ';'

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    structdef  go to state 10
    type       go to state 11
    plaintype  go to state 12
    function   go to state 13
    vardecl    go to state 14


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 15
    ';'  shift, and go to state 16


State 4

   13 plaintype: TOK_VOID .

    $default  reduce using rule 13 (plaintype)


State 5

   10 plaintype: TOK_INT .

    $default  reduce using rule 10 (plaintype)


State 6

   11 plaintype: TOK_STRING .

    $default  reduce using rule 11 (plaintype)


State 7

    7 structdef: TOK_STRUCT . TOK_IDENT '{' type TOK_IDENT ';' '}' ';'

    TOK_IDENT  shift, and go to state 17


State 8

    9 type: TOK_ARRAY .

    $default  reduce using rule 9 (type)


State 9

   12 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 18


State 10

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 11

   28 vardecl: type . TOK_IDENT ';'
   29        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 19


State 12

    8 type: plaintype .
   14 function: plaintype . TOK_IDENT '(' ')' block
   15         | plaintype . TOK_IDENT '(' parameters ')' block

    TOK_IDENT  shift, and go to state 20

    TOK_IDENT  [reduce using rule 8 (type)]


State 13

    2 program: program function .

    $default  reduce using rule 2 (program)


State 14

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 15

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 16

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 17

    7 structdef: TOK_STRUCT TOK_IDENT . '{' type TOK_IDENT ';' '}' ';'

    '{'  shift, and go to state 21


State 18

   12 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 22


State 19

   28 vardecl: type TOK_IDENT . ';'
   29        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 23
    ';'  shift, and go to state 24


State 20

   14 function: plaintype TOK_IDENT . '(' ')' block
   15         | plaintype TOK_IDENT . '(' parameters ')' block

    '('  shift, and go to state 25


State 21

    7 structdef: TOK_STRUCT TOK_IDENT '{' . type TOK_IDENT ';' '}' ';'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 26
    plaintype  go to state 27


State 22

   12 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 28


State 23

   29 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 36
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 24

   28 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 28 (vardecl)


State 25

   14 function: plaintype TOK_IDENT '(' . ')' block
   15         | plaintype TOK_IDENT '(' . parameters ')' block

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9
    ')'         shift, and go to state 41

    type        go to state 42
    plaintype   go to state 27
    parameters  go to state 43


State 26

    7 structdef: TOK_STRUCT TOK_IDENT '{' type . TOK_IDENT ';' '}' ';'

    TOK_IDENT  shift, and go to state 44


State 27

    8 type: plaintype .

    $default  reduce using rule 8 (type)


State 28

   12 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 45


State 29

   58 constant: TOK_NULLPTR .

    $default  reduce using rule 58 (constant)


State 30

   52 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   53          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   54          | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 46


State 31

   59 call: TOK_IDENT . '('
   62 variable: TOK_IDENT .

    '('  shift, and go to state 47

    '('       [reduce using rule 62 (variable)]
    $default  reduce using rule 62 (variable)


State 32

   55 constant: TOK_INTCON .

    $default  reduce using rule 55 (constant)


State 33

   57 constant: TOK_CHARCON .

    $default  reduce using rule 57 (constant)


State 34

   56 constant: TOK_STRINGCON .

    $default  reduce using rule 56 (constant)


State 35

   51 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 48
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 36

   29 vardecl: type TOK_IDENT '=' expr . ';'
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    TOK_EQ     shift, and go to state 50
    TOK_NE     shift, and go to state 51
    TOK_LT     shift, and go to state 52
    TOK_LE     shift, and go to state 53
    TOK_GT     shift, and go to state 54
    TOK_GE     shift, and go to state 55
    '='        shift, and go to state 56
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61
    ';'        shift, and go to state 62


State 37

   50 expr: allocator .

    $default  reduce using rule 50 (expr)


State 38

   49 expr: constant .

    $default  reduce using rule 49 (expr)


State 39

   48 expr: call .
   60 call: call . expr
   61     | call . ')'

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35
    ')'            shift, and go to state 63

    TOK_NULLPTR    [reduce using rule 48 (expr)]
    TOK_ALLOC      [reduce using rule 48 (expr)]
    TOK_IDENT      [reduce using rule 48 (expr)]
    TOK_INTCON     [reduce using rule 48 (expr)]
    TOK_CHARCON    [reduce using rule 48 (expr)]
    TOK_STRINGCON  [reduce using rule 48 (expr)]
    '('            [reduce using rule 48 (expr)]
    ')'            [reduce using rule 48 (expr)]
    $default       reduce using rule 48 (expr)

    expr       go to state 64
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 40

   47 expr: variable .

    $default  reduce using rule 47 (expr)


State 41

   14 function: plaintype TOK_IDENT '(' ')' . block

    '{'  shift, and go to state 65

    block  go to state 66


State 42

   16 parameters: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 67


State 43

   15 function: plaintype TOK_IDENT '(' parameters . ')' block
   17 parameters: parameters . ',' type TOK_IDENT

    ')'  shift, and go to state 68
    ','  shift, and go to state 69


State 44

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT . ';' '}' ';'

    ';'  shift, and go to state 70


State 45

   12 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 12 (plaintype)


State 46

   52 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   53          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   54          | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_STRING  shift, and go to state 71
    TOK_STRUCT  shift, and go to state 72
    TOK_ARRAY   shift, and go to state 73


State 47

   59 call: TOK_IDENT '(' .

    $default  reduce using rule 59 (call)


State 48

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   51     | '(' expr . ')'
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    TOK_EQ     shift, and go to state 50
    TOK_NE     shift, and go to state 51
    TOK_LT     shift, and go to state 52
    TOK_LE     shift, and go to state 53
    TOK_GT     shift, and go to state 54
    TOK_GE     shift, and go to state 55
    '='        shift, and go to state 56
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61
    ')'        shift, and go to state 74


State 49

   63 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 75


State 50

   45 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 76
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 51

   46 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 77
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 52

   42 expr: expr TOK_LT . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 78
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 53

   43 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 79
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 54

   41 expr: expr TOK_GT . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 80
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 55

   44 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 81
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 56

   40 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 82
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 57

   35 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 83
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 58

   36 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 84
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 59

   37 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 85
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 60

   38 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 86
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 61

   39 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 87
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 62

   29 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 29 (vardecl)


State 63

   61 call: call ')' .

    $default  reduce using rule 61 (call)


State 64

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   60 call: call expr .
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    TOK_EQ     shift, and go to state 50
    TOK_NE     shift, and go to state 51
    TOK_LT     shift, and go to state 52
    TOK_LE     shift, and go to state 53
    TOK_GT     shift, and go to state 54
    TOK_GE     shift, and go to state 55
    '='        shift, and go to state 56
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61

    TOK_ARROW  [reduce using rule 60 (call)]
    TOK_EQ     [reduce using rule 60 (call)]
    TOK_NE     [reduce using rule 60 (call)]
    TOK_LT     [reduce using rule 60 (call)]
    TOK_LE     [reduce using rule 60 (call)]
    TOK_GT     [reduce using rule 60 (call)]
    TOK_GE     [reduce using rule 60 (call)]
    '='        [reduce using rule 60 (call)]
    '+'        [reduce using rule 60 (call)]
    '-'        [reduce using rule 60 (call)]
    '*'        [reduce using rule 60 (call)]
    '/'        [reduce using rule 60 (call)]
    '%'        [reduce using rule 60 (call)]
    $default   reduce using rule 60 (call)


State 65

   18 block: '{' .

    $default  reduce using rule 18 (block)


State 66

   14 function: plaintype TOK_IDENT '(' ')' block .
   19 block: block . statement
   20      | block . '}'

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 88
    TOK_WHILE      shift, and go to state 89
    TOK_RETURN     shift, and go to state 90
    TOK_NULLPTR    shift, and go to state 29
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 30
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '}'            shift, and go to state 91
    ';'            shift, and go to state 92
    '{'            shift, and go to state 65
    '('            shift, and go to state 35

    TOK_VOID    [reduce using rule 14 (function)]
    TOK_INT     [reduce using rule 14 (function)]
    TOK_STRING  [reduce using rule 14 (function)]
    TOK_ARRAY   [reduce using rule 14 (function)]
    TOK_PTR     [reduce using rule 14 (function)]
    $default    reduce using rule 14 (function)

    type       go to state 11
    plaintype  go to state 27
    block      go to state 93
    statement  go to state 94
    vardecl    go to state 95
    while      go to state 96
    ifelse     go to state 97
    return     go to state 98
    expr       go to state 99
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 67

   16 parameters: type TOK_IDENT .

    $default  reduce using rule 16 (parameters)


State 68

   15 function: plaintype TOK_IDENT '(' parameters ')' . block

    '{'  shift, and go to state 65

    block  go to state 100


State 69

   17 parameters: parameters ',' . type TOK_IDENT

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_ARRAY   shift, and go to state 8
    TOK_PTR     shift, and go to state 9

    type       go to state 101
    plaintype  go to state 27


State 70

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' . '}' ';'

    '}'  shift, and go to state 102


State 71

   52 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 103


State 72

   53 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 104


State 73

   54 allocator: TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 105


State 74

   51 expr: '(' expr ')' .

    $default  reduce using rule 51 (expr)


State 75

   63 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 63 (variable)


State 76

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   45     | expr TOK_EQ expr .
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61

    $default  reduce using rule 45 (expr)


State 77

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   46     | expr TOK_NE expr .
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61

    $default  reduce using rule 46 (expr)


State 78

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   42     | expr TOK_LT expr .
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61

    $default  reduce using rule 42 (expr)


State 79

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   43     | expr TOK_LE expr .
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61

    $default  reduce using rule 43 (expr)


State 80

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   41     | expr TOK_GT expr .
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61

    $default  reduce using rule 41 (expr)


State 81

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   44     | expr TOK_GE expr .
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61

    $default  reduce using rule 44 (expr)


State 82

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   40     | expr '=' expr .
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    TOK_EQ     shift, and go to state 50
    TOK_NE     shift, and go to state 51
    TOK_LT     shift, and go to state 52
    TOK_LE     shift, and go to state 53
    TOK_GT     shift, and go to state 54
    TOK_GE     shift, and go to state 55
    '='        shift, and go to state 56
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61

    $default  reduce using rule 40 (expr)


State 83

   35 expr: expr . '+' expr
   35     | expr '+' expr .
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61

    $default  reduce using rule 35 (expr)


State 84

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   36     | expr '-' expr .
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61

    $default  reduce using rule 36 (expr)


State 85

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   37     | expr '*' expr .
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49

    $default  reduce using rule 37 (expr)


State 86

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   38     | expr '/' expr .
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49

    $default  reduce using rule 38 (expr)


State 87

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   39     | expr '%' expr .
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49

    $default  reduce using rule 39 (expr)


State 88

   31 ifelse: TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 106


State 89

   30 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 107


State 90

   33 return: TOK_RETURN . expr ';'
   34       | TOK_RETURN . ';'

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    ';'            shift, and go to state 108
    '('            shift, and go to state 35

    expr       go to state 109
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 91

   20 block: block '}' .

    $default  reduce using rule 20 (block)


State 92

   27 statement: ';' .

    $default  reduce using rule 27 (statement)


State 93

   19 block: block . statement
   20      | block . '}'
   23 statement: block .

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 88
    TOK_WHILE      shift, and go to state 89
    TOK_RETURN     shift, and go to state 90
    TOK_NULLPTR    shift, and go to state 29
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 30
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '}'            shift, and go to state 91
    ';'            shift, and go to state 92
    '{'            shift, and go to state 65
    '('            shift, and go to state 35

    TOK_VOID       [reduce using rule 23 (statement)]
    TOK_INT        [reduce using rule 23 (statement)]
    TOK_STRING     [reduce using rule 23 (statement)]
    TOK_IF         [reduce using rule 23 (statement)]
    TOK_WHILE      [reduce using rule 23 (statement)]
    TOK_RETURN     [reduce using rule 23 (statement)]
    TOK_NULLPTR    [reduce using rule 23 (statement)]
    TOK_ARRAY      [reduce using rule 23 (statement)]
    TOK_ALLOC      [reduce using rule 23 (statement)]
    TOK_PTR        [reduce using rule 23 (statement)]
    TOK_IDENT      [reduce using rule 23 (statement)]
    TOK_INTCON     [reduce using rule 23 (statement)]
    TOK_CHARCON    [reduce using rule 23 (statement)]
    TOK_STRINGCON  [reduce using rule 23 (statement)]
    '}'            [reduce using rule 23 (statement)]
    ';'            [reduce using rule 23 (statement)]
    '{'            [reduce using rule 23 (statement)]
    '('            [reduce using rule 23 (statement)]
    $default       reduce using rule 23 (statement)

    type       go to state 11
    plaintype  go to state 27
    block      go to state 93
    statement  go to state 94
    vardecl    go to state 95
    while      go to state 96
    ifelse     go to state 97
    return     go to state 98
    expr       go to state 99
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 94

   19 block: block statement .

    $default  reduce using rule 19 (block)


State 95

   21 statement: vardecl .

    $default  reduce using rule 21 (statement)


State 96

   24 statement: while .

    $default  reduce using rule 24 (statement)


State 97

   25 statement: ifelse .
   32 ifelse: ifelse . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 110

    TOK_ELSE  [reduce using rule 25 (statement)]
    $default  reduce using rule 25 (statement)


State 98

   26 statement: return .

    $default  reduce using rule 26 (statement)


State 99

   22 statement: expr . ';'
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    TOK_EQ     shift, and go to state 50
    TOK_NE     shift, and go to state 51
    TOK_LT     shift, and go to state 52
    TOK_LE     shift, and go to state 53
    TOK_GT     shift, and go to state 54
    TOK_GE     shift, and go to state 55
    '='        shift, and go to state 56
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61
    ';'        shift, and go to state 111


State 100

   15 function: plaintype TOK_IDENT '(' parameters ')' block .
   19 block: block . statement
   20      | block . '}'

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 88
    TOK_WHILE      shift, and go to state 89
    TOK_RETURN     shift, and go to state 90
    TOK_NULLPTR    shift, and go to state 29
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 30
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '}'            shift, and go to state 91
    ';'            shift, and go to state 92
    '{'            shift, and go to state 65
    '('            shift, and go to state 35

    TOK_VOID    [reduce using rule 15 (function)]
    TOK_INT     [reduce using rule 15 (function)]
    TOK_STRING  [reduce using rule 15 (function)]
    TOK_ARRAY   [reduce using rule 15 (function)]
    TOK_PTR     [reduce using rule 15 (function)]
    $default    reduce using rule 15 (function)

    type       go to state 11
    plaintype  go to state 27
    block      go to state 93
    statement  go to state 94
    vardecl    go to state 95
    while      go to state 96
    ifelse     go to state 97
    return     go to state 98
    expr       go to state 99
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 101

   17 parameters: parameters ',' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 112


State 102

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' '}' . ';'

    ';'  shift, and go to state 113


State 103

   52 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 114


State 104

   53 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 115


State 105

   54 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_PTR     shift, and go to state 9

    plaintype  go to state 116


State 106

   31 ifelse: TOK_IF '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 117
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 107

   30 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 118
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 108

   34 return: TOK_RETURN ';' .

    $default  reduce using rule 34 (return)


State 109

   33 return: TOK_RETURN expr . ';'
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    TOK_EQ     shift, and go to state 50
    TOK_NE     shift, and go to state 51
    TOK_LT     shift, and go to state 52
    TOK_LE     shift, and go to state 53
    TOK_GT     shift, and go to state 54
    TOK_GE     shift, and go to state 55
    '='        shift, and go to state 56
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61
    ';'        shift, and go to state 119


State 110

   32 ifelse: ifelse TOK_ELSE . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 88
    TOK_WHILE      shift, and go to state 89
    TOK_RETURN     shift, and go to state 90
    TOK_NULLPTR    shift, and go to state 29
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 30
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    ';'            shift, and go to state 92
    '{'            shift, and go to state 65
    '('            shift, and go to state 35

    type       go to state 11
    plaintype  go to state 27
    block      go to state 93
    statement  go to state 120
    vardecl    go to state 95
    while      go to state 96
    ifelse     go to state 97
    return     go to state 98
    expr       go to state 99
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 111

   22 statement: expr ';' .

    $default  reduce using rule 22 (statement)


State 112

   17 parameters: parameters ',' type TOK_IDENT .

    $default  reduce using rule 17 (parameters)


State 113

    7 structdef: TOK_STRUCT TOK_IDENT '{' type TOK_IDENT ';' '}' ';' .

    $default  reduce using rule 7 (structdef)


State 114

   52 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 121
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 115

   53 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 122


State 116

   54 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype . TOK_GT TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 123


State 117

   31 ifelse: TOK_IF '(' expr . ')' statement
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    TOK_EQ     shift, and go to state 50
    TOK_NE     shift, and go to state 51
    TOK_LT     shift, and go to state 52
    TOK_LE     shift, and go to state 53
    TOK_GT     shift, and go to state 54
    TOK_GE     shift, and go to state 55
    '='        shift, and go to state 56
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61
    ')'        shift, and go to state 124


State 118

   30 while: TOK_WHILE '(' expr . ')' statement
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    TOK_EQ     shift, and go to state 50
    TOK_NE     shift, and go to state 51
    TOK_LT     shift, and go to state 52
    TOK_LE     shift, and go to state 53
    TOK_GT     shift, and go to state 54
    TOK_GE     shift, and go to state 55
    '='        shift, and go to state 56
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61
    ')'        shift, and go to state 125


State 119

   33 return: TOK_RETURN expr ';' .

    $default  reduce using rule 33 (return)


State 120

   32 ifelse: ifelse TOK_ELSE statement .

    $default  reduce using rule 32 (ifelse)


State 121

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   52 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    TOK_EQ     shift, and go to state 50
    TOK_NE     shift, and go to state 51
    TOK_LT     shift, and go to state 52
    TOK_LE     shift, and go to state 53
    TOK_GT     shift, and go to state 54
    TOK_GE     shift, and go to state 55
    '='        shift, and go to state 56
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61
    ')'        shift, and go to state 126


State 122

   53 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 127


State 123

   54 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 128


State 124

   31 ifelse: TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 88
    TOK_WHILE      shift, and go to state 89
    TOK_RETURN     shift, and go to state 90
    TOK_NULLPTR    shift, and go to state 29
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 30
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    ';'            shift, and go to state 92
    '{'            shift, and go to state 65
    '('            shift, and go to state 35

    type       go to state 11
    plaintype  go to state 27
    block      go to state 93
    statement  go to state 129
    vardecl    go to state 95
    while      go to state 96
    ifelse     go to state 97
    return     go to state 98
    expr       go to state 99
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 125

   30 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 88
    TOK_WHILE      shift, and go to state 89
    TOK_RETURN     shift, and go to state 90
    TOK_NULLPTR    shift, and go to state 29
    TOK_ARRAY      shift, and go to state 8
    TOK_ALLOC      shift, and go to state 30
    TOK_PTR        shift, and go to state 9
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    ';'            shift, and go to state 92
    '{'            shift, and go to state 65
    '('            shift, and go to state 35

    type       go to state 11
    plaintype  go to state 27
    block      go to state 93
    statement  go to state 130
    vardecl    go to state 95
    while      go to state 96
    ifelse     go to state 97
    return     go to state 98
    expr       go to state 99
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 126

   52 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 52 (allocator)


State 127

   53 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 53 (allocator)


State 128

   54 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT . '(' expr ')'

    '('  shift, and go to state 131


State 129

   31 ifelse: TOK_IF '(' expr ')' statement .

    $default  reduce using rule 31 (ifelse)


State 130

   30 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 30 (while)


State 131

   54 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 29
    TOK_ALLOC      shift, and go to state 30
    TOK_IDENT      shift, and go to state 31
    TOK_INTCON     shift, and go to state 32
    TOK_CHARCON    shift, and go to state 33
    TOK_STRINGCON  shift, and go to state 34
    '('            shift, and go to state 35

    expr       go to state 132
    allocator  go to state 37
    constant   go to state 38
    call       go to state 39
    variable   go to state 40


State 132

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . '%' expr
   40     | expr . '=' expr
   41     | expr . TOK_GT expr
   42     | expr . TOK_LT expr
   43     | expr . TOK_LE expr
   44     | expr . TOK_GE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   54 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr . ')'
   63 variable: expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 49
    TOK_EQ     shift, and go to state 50
    TOK_NE     shift, and go to state 51
    TOK_LT     shift, and go to state 52
    TOK_LE     shift, and go to state 53
    TOK_GT     shift, and go to state 54
    TOK_GE     shift, and go to state 55
    '='        shift, and go to state 56
    '+'        shift, and go to state 57
    '-'        shift, and go to state 58
    '*'        shift, and go to state 59
    '/'        shift, and go to state 60
    '%'        shift, and go to state 61
    ')'        shift, and go to state 133


State 133

   54 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')' .

    $default  reduce using rule 54 (allocator)
