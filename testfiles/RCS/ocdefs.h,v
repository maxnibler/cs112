head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2019.04.18.01.51.14;	author -;	state -;
branches;
next	1.3;

1.3
date	2019.04.16.20.44.49;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.04.16.19.16.27;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.04.16.19.14.45;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: ocdefs.h,v 1.3 2019-04-16 13:44:49-07 - - $

// C++ template file used to compile oc programs with c++ compiler.

#ifndef __OCDEFS_H__
#define __OCDEFS_H__

#include <type_traits>

using string = char*;

template <typename type>
using ptr = type*;

template <typename type>
struct array {
   using array_value_type = type;
   type* data {};
   array() = default;
   array (type* that) { data = that; }
   array& operator= (type* that) { data = that; return *this; }
   type& operator[] (int i) { return data[i]; }
};

template <typename type>
typename std::enable_if<std::is_class<type>::value,ptr<type>>::type
alloc() {
   return new type();
}

template <typename type>
array<typename type::array_value_type>
alloc (int size) {
   auto result = new typename type::array_value_type [size] {};
   using result_t = array<typename type::array_value_type>*;
   return *reinterpret_cast<result_t> (&result);
}

template <typename type>
typename std::enable_if<std::is_same<type,string>::value,string>::type
alloc (int size) {
   return new char[size] {};
}

#endif

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: ocdefs.h,v 1.2 2019-04-16 12:16:27-07 - - $
d5 2
a6 2
#ifndef __OCCDEFS_H__
#define __OCCDEFS_H__
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: ocdefs.h,v 1.1 2019-04-16 12:14:45-07 - - $
d18 1
a18 1
   type* data;
d34 1
a34 1
   auto result = new typename type::array_value_type [size];
d42 1
a42 1
   return new char[size];
@


1.1
log
@-
@
text
@d1 3
a3 1
// $Id: ocdefs.h,v 1.1 2019-04-16 12:08:38-07 - - $
@
