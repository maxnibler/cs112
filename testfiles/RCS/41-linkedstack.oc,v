head	1.4;
access;
symbols;
locks;
comment	@# @;


1.4
date	2019.05.06.19.54.55;	author -;	state -;
branches;
next	1.3;

1.3
date	2019.05.06.19.15.43;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.04.17.20.23.14;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.04.16.19.14.45;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: 41-linkedstack.oc,v 1.3 2019-05-06 12:15:43-07 - - $

#include "oclib.h"

struct node {
   string data;
   ptr <struct node> link;
};

struct stack {
   ptr <struct node> top;
};

int empty (ptr<struct stack> stack) {
   assert (stack != nullptr);
   return stack->top == nullptr;
}

ptr<struct stack> new_stack() {
   ptr<struct stack> stack = alloc<struct stack>();
   stack->top = nullptr;
   return stack;
}

void push (ptr<struct stack> stack, string str) {
   ptr <struct node> tmp = alloc<struct node>();
   assert (stack != nullptr);
   tmp->data = str;
   tmp->link = stack->top;
   stack->top = tmp;
}

string pop (ptr<struct stack> stack) {
   string tmp = stack->top->data;
   assert (stack != nullptr);
   assert (not empty (stack));
   stack->top = stack->top->link;
   return tmp;
}

int main (int argc, array<string> argv) {
   int argi = 0;
   ptr<struct stack> stack = new_stack();
   while (argi < argc) {
      push (stack, argv[argi]);
      argi = argi + 1;
   }
   while (not empty (stack)) {
      putstr (pop (stack));
      putchr ('\n');
   }
   return SUCCESS;
}

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.2 2019-04-17 13:23:14-07 - - $
d7 1
a7 1
   ptr<node> link;
d26 1
a26 1
   ptr <struct node> tmp = alloc<node>();
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.1 2019-04-16 12:14:45-07 - - $
d11 1
a11 1
   ptr<node> top;
d26 1
a26 1
   ptr<node> tmp = alloc<node>();
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.1 2019-04-16 12:00:10-07 - - $
d42 1
a43 2
   int argi = 0;

a47 1

@
